
#ifndef _H_u_tapi_topology
#define _H_u_tapi_topology
/* 
 * Copyright (c) 2008-2012, Andy Bierman, All Rights Reserved.
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *

*** Generated by yangdump 2.5-5

    User SIL header
    module tapi-topology
    revision 2016-12-15
    namespace urn:onf:params:xml:ns:yang:TapiTopology
    organization Open Networking Foundation (ONF) / Open Transport Working Group(OTWG) / Transport API (TAPI) Project

 */

#include <xmlstring.h>

#include "agt.h"
#include "agt_cb.h"
#include "agt_rpc.h"
#include "dlq.h"
#include "ncxtypes.h"
#include "op.h"
#include "rpc.h"
#include "ses.h"
#include "status.h"
#include "val.h"
#include "y_tapi-topology.h"

#ifdef __cplusplus
extern "C" {
#endif

/* list /network-topology/node/owned-node-edge-point/layer-protocol/name */
typedef struct y_tapi_topology_T_network_topology_node_owned_node_edge_point_layer_protocol_name_ {
    dlq_hdr_t qhdr;
    xmlChar *value_name;
    xmlChar *value;
} y_tapi_topology_T_network_topology_node_owned_node_edge_point_layer_protocol_name;

/* container /network-topology/node/owned-node-edge-point/layer-protocol/extensions */
typedef struct y_tapi_topology_T_network_topology_node_owned_node_edge_point_layer_protocol_extensions_ {
} y_tapi_topology_T_network_topology_node_owned_node_edge_point_layer_protocol_extensions;

/* list /network-topology/node/owned-node-edge-point/layer-protocol */
typedef struct y_tapi_topology_T_network_topology_node_owned_node_edge_point_layer_protocol_ {
    dlq_hdr_t qhdr;
    xmlChar *layer_protocol_name;
    xmlChar *termination_direction;
    xmlChar *termination_state;
    xmlChar *local_id;
    dlq_hdr_t name;
    y_tapi_topology_T_network_topology_node_owned_node_edge_point_layer_protocol_extensions extensions;
} y_tapi_topology_T_network_topology_node_owned_node_edge_point_layer_protocol;

/* leaf-list /network-topology/node/owned-node-edge-point/client-node-edge-point */
typedef struct y_tapi_topology_T_network_topology_node_owned_node_edge_point_client_node_edge_point_ {
    dlq_hdr_t qhdr;
    xmlChar *client_node_edge_point;
} y_tapi_topology_T_network_topology_node_owned_node_edge_point_client_node_edge_point;

/* leaf-list /network-topology/node/owned-node-edge-point/mapped-service-end-point */
typedef struct y_tapi_topology_T_network_topology_node_owned_node_edge_point_mapped_service_end_point_ {
    dlq_hdr_t qhdr;
    xmlChar *mapped_service_end_point;
} y_tapi_topology_T_network_topology_node_owned_node_edge_point_mapped_service_end_point;

/* container /network-topology/node/owned-node-edge-point/state */
typedef struct y_tapi_topology_T_network_topology_node_owned_node_edge_point_state_ {
    xmlChar *administrative_state;
    xmlChar *operational_state;
    xmlChar *lifecycle_state;
} y_tapi_topology_T_network_topology_node_owned_node_edge_point_state;

/* list /network-topology/node/owned-node-edge-point/name */
typedef struct y_tapi_topology_T_network_topology_node_owned_node_edge_point_name_ {
    dlq_hdr_t qhdr;
    xmlChar *value_name;
    xmlChar *value;
} y_tapi_topology_T_network_topology_node_owned_node_edge_point_name;

/* list /network-topology/node/owned-node-edge-point/label */
typedef struct y_tapi_topology_T_network_topology_node_owned_node_edge_point_label_ {
    dlq_hdr_t qhdr;
    xmlChar *value_name;
    xmlChar *value;
} y_tapi_topology_T_network_topology_node_owned_node_edge_point_label;

/* container /network-topology/node/owned-node-edge-point/extensions */
typedef struct y_tapi_topology_T_network_topology_node_owned_node_edge_point_extensions_ {
} y_tapi_topology_T_network_topology_node_owned_node_edge_point_extensions;

/* list /network-topology/node/owned-node-edge-point */
typedef struct y_tapi_topology_T_network_topology_node_owned_node_edge_point_ {
    dlq_hdr_t qhdr;
    dlq_hdr_t layer_protocol;
    dlq_hdr_t client_node_edge_point;
    dlq_hdr_t mapped_service_end_point;
    y_tapi_topology_T_network_topology_node_owned_node_edge_point_state state;
    xmlChar *termination_direction;
    xmlChar *link_port_direction;
    xmlChar *link_port_role;
    xmlChar *uuid;
    dlq_hdr_t name;
    dlq_hdr_t label;
    y_tapi_topology_T_network_topology_node_owned_node_edge_point_extensions extensions;
} y_tapi_topology_T_network_topology_node_owned_node_edge_point;

/* leaf-list /network-topology/node/aggregated-node-edge-point */
typedef struct y_tapi_topology_T_network_topology_node_aggregated_node_edge_point_ {
    dlq_hdr_t qhdr;
    xmlChar *aggregated_node_edge_point;
} y_tapi_topology_T_network_topology_node_aggregated_node_edge_point;

/* container /network-topology/node/state */
typedef struct y_tapi_topology_T_network_topology_node_state_ {
    xmlChar *administrative_state;
    xmlChar *operational_state;
    xmlChar *lifecycle_state;
} y_tapi_topology_T_network_topology_node_state;

/* container /network-topology/node/transfer-capacity/total-potential-capacity */
typedef struct y_tapi_topology_T_network_topology_node_transfer_capacity_total_potential_capacity_ {
    xmlChar *total_size;
    xmlChar *packet_bw_profile_type;
    uint64 committed_information_rate;
    uint64 committed_burst_size;
    uint64 peak_information_rate;
    uint64 peak_burst_size;
    boolean color_aware;
    boolean coupling_flag;
} y_tapi_topology_T_network_topology_node_transfer_capacity_total_potential_capacity;

/* container /network-topology/node/transfer-capacity/available-capacity */
typedef struct y_tapi_topology_T_network_topology_node_transfer_capacity_available_capacity_ {
    xmlChar *total_size;
    xmlChar *packet_bw_profile_type;
    uint64 committed_information_rate;
    uint64 committed_burst_size;
    uint64 peak_information_rate;
    uint64 peak_burst_size;
    boolean color_aware;
    boolean coupling_flag;
} y_tapi_topology_T_network_topology_node_transfer_capacity_available_capacity;

/* list /network-topology/node/transfer-capacity/capacity-assigned-to-user-view */
typedef struct y_tapi_topology_T_network_topology_node_transfer_capacity_capacity_assigned_to_user_view_ {
    dlq_hdr_t qhdr;
    xmlChar *total_size;
    xmlChar *packet_bw_profile_type;
    uint64 committed_information_rate;
    uint64 committed_burst_size;
    uint64 peak_information_rate;
    uint64 peak_burst_size;
    boolean color_aware;
    boolean coupling_flag;
} y_tapi_topology_T_network_topology_node_transfer_capacity_capacity_assigned_to_user_view;

/* container /network-topology/node/transfer-capacity */
typedef struct y_tapi_topology_T_network_topology_node_transfer_capacity_ {
    y_tapi_topology_T_network_topology_node_transfer_capacity_total_potential_capacity total_potential_capacity;
    y_tapi_topology_T_network_topology_node_transfer_capacity_available_capacity available_capacity;
    dlq_hdr_t capacity_assigned_to_user_view;
    xmlChar *capacity_interaction_algorithm;
} y_tapi_topology_T_network_topology_node_transfer_capacity;

/* list /network-topology/node/transfer-cost/cost-characteristic */
typedef struct y_tapi_topology_T_network_topology_node_transfer_cost_cost_characteristic_ {
    dlq_hdr_t qhdr;
    xmlChar *cost_name;
    xmlChar *cost_value;
    xmlChar *cost_algorithm;
} y_tapi_topology_T_network_topology_node_transfer_cost_cost_characteristic;

/* container /network-topology/node/transfer-cost */
typedef struct y_tapi_topology_T_network_topology_node_transfer_cost_ {
    dlq_hdr_t cost_characteristic;
} y_tapi_topology_T_network_topology_node_transfer_cost;

/* container /network-topology/node/transfer-integrity */
typedef struct y_tapi_topology_T_network_topology_node_transfer_integrity_ {
    xmlChar *error_characteristic;
    xmlChar *loss_characteristic;
    xmlChar *repeat_delivery_characteristic;
    xmlChar *delivery_order_characteristic;
    xmlChar *unavailable_time_characteristic;
    xmlChar *server_integrity_process_characteristic;
} y_tapi_topology_T_network_topology_node_transfer_integrity;

/* list /network-topology/node/transfer-timing/latency-characteristic */
typedef struct y_tapi_topology_T_network_topology_node_transfer_timing_latency_characteristic_ {
    dlq_hdr_t qhdr;
    xmlChar *fixed_latency_characteristic;
    xmlChar *jitter_characteristic;
    xmlChar *wander_characteristic;
    xmlChar *traffic_property_name;
    xmlChar *traffic_property_queing_latency;
} y_tapi_topology_T_network_topology_node_transfer_timing_latency_characteristic;

/* container /network-topology/node/transfer-timing */
typedef struct y_tapi_topology_T_network_topology_node_transfer_timing_ {
    dlq_hdr_t latency_characteristic;
} y_tapi_topology_T_network_topology_node_transfer_timing;

/* leaf-list /network-topology/node/layer-protocol-name */
typedef struct y_tapi_topology_T_network_topology_node_layer_protocol_name_ {
    dlq_hdr_t qhdr;
    xmlChar *layer_protocol_name;
} y_tapi_topology_T_network_topology_node_layer_protocol_name;

/* list /network-topology/node/name */
typedef struct y_tapi_topology_T_network_topology_node_name_ {
    dlq_hdr_t qhdr;
    xmlChar *value_name;
    xmlChar *value;
} y_tapi_topology_T_network_topology_node_name;

/* list /network-topology/node/label */
typedef struct y_tapi_topology_T_network_topology_node_label_ {
    dlq_hdr_t qhdr;
    xmlChar *value_name;
    xmlChar *value;
} y_tapi_topology_T_network_topology_node_label;

/* container /network-topology/node/extensions */
typedef struct y_tapi_topology_T_network_topology_node_extensions_ {
} y_tapi_topology_T_network_topology_node_extensions;

/* list /network-topology/node */
typedef struct y_tapi_topology_T_network_topology_node_ {
    dlq_hdr_t qhdr;
    dlq_hdr_t owned_node_edge_point;
    dlq_hdr_t aggregated_node_edge_point;
    xmlChar *encap_topology;
    y_tapi_topology_T_network_topology_node_state state;
    y_tapi_topology_T_network_topology_node_transfer_capacity transfer_capacity;
    y_tapi_topology_T_network_topology_node_transfer_cost transfer_cost;
    y_tapi_topology_T_network_topology_node_transfer_integrity transfer_integrity;
    y_tapi_topology_T_network_topology_node_transfer_timing transfer_timing;
    dlq_hdr_t layer_protocol_name;
    xmlChar *uuid;
    dlq_hdr_t name;
    dlq_hdr_t label;
    y_tapi_topology_T_network_topology_node_extensions extensions;
} y_tapi_topology_T_network_topology_node;

/* leaf-list /network-topology/link/node-edge-point */
typedef struct y_tapi_topology_T_network_topology_link_node_edge_point_ {
    dlq_hdr_t qhdr;
    xmlChar *node_edge_point;
} y_tapi_topology_T_network_topology_link_node_edge_point;

/* leaf-list /network-topology/link/node */
typedef struct y_tapi_topology_T_network_topology_link_node_ {
    dlq_hdr_t qhdr;
    xmlChar *node;
} y_tapi_topology_T_network_topology_link_node;

/* container /network-topology/link/state */
typedef struct y_tapi_topology_T_network_topology_link_state_ {
    xmlChar *administrative_state;
    xmlChar *operational_state;
    xmlChar *lifecycle_state;
} y_tapi_topology_T_network_topology_link_state;

/* container /network-topology/link/transfer-capacity/total-potential-capacity */
typedef struct y_tapi_topology_T_network_topology_link_transfer_capacity_total_potential_capacity_ {
    xmlChar *total_size;
    xmlChar *packet_bw_profile_type;
    uint64 committed_information_rate;
    uint64 committed_burst_size;
    uint64 peak_information_rate;
    uint64 peak_burst_size;
    boolean color_aware;
    boolean coupling_flag;
} y_tapi_topology_T_network_topology_link_transfer_capacity_total_potential_capacity;

/* container /network-topology/link/transfer-capacity/available-capacity */
typedef struct y_tapi_topology_T_network_topology_link_transfer_capacity_available_capacity_ {
    xmlChar *total_size;
    xmlChar *packet_bw_profile_type;
    uint64 committed_information_rate;
    uint64 committed_burst_size;
    uint64 peak_information_rate;
    uint64 peak_burst_size;
    boolean color_aware;
    boolean coupling_flag;
} y_tapi_topology_T_network_topology_link_transfer_capacity_available_capacity;

/* list /network-topology/link/transfer-capacity/capacity-assigned-to-user-view */
typedef struct y_tapi_topology_T_network_topology_link_transfer_capacity_capacity_assigned_to_user_view_ {
    dlq_hdr_t qhdr;
    xmlChar *total_size;
    xmlChar *packet_bw_profile_type;
    uint64 committed_information_rate;
    uint64 committed_burst_size;
    uint64 peak_information_rate;
    uint64 peak_burst_size;
    boolean color_aware;
    boolean coupling_flag;
} y_tapi_topology_T_network_topology_link_transfer_capacity_capacity_assigned_to_user_view;

/* container /network-topology/link/transfer-capacity */
typedef struct y_tapi_topology_T_network_topology_link_transfer_capacity_ {
    y_tapi_topology_T_network_topology_link_transfer_capacity_total_potential_capacity total_potential_capacity;
    y_tapi_topology_T_network_topology_link_transfer_capacity_available_capacity available_capacity;
    dlq_hdr_t capacity_assigned_to_user_view;
    xmlChar *capacity_interaction_algorithm;
} y_tapi_topology_T_network_topology_link_transfer_capacity;

/* list /network-topology/link/transfer-cost/cost-characteristic */
typedef struct y_tapi_topology_T_network_topology_link_transfer_cost_cost_characteristic_ {
    dlq_hdr_t qhdr;
    xmlChar *cost_name;
    xmlChar *cost_value;
    xmlChar *cost_algorithm;
} y_tapi_topology_T_network_topology_link_transfer_cost_cost_characteristic;

/* container /network-topology/link/transfer-cost */
typedef struct y_tapi_topology_T_network_topology_link_transfer_cost_ {
    dlq_hdr_t cost_characteristic;
} y_tapi_topology_T_network_topology_link_transfer_cost;

/* container /network-topology/link/transfer-integrity */
typedef struct y_tapi_topology_T_network_topology_link_transfer_integrity_ {
    xmlChar *error_characteristic;
    xmlChar *loss_characteristic;
    xmlChar *repeat_delivery_characteristic;
    xmlChar *delivery_order_characteristic;
    xmlChar *unavailable_time_characteristic;
    xmlChar *server_integrity_process_characteristic;
} y_tapi_topology_T_network_topology_link_transfer_integrity;

/* list /network-topology/link/transfer-timing/latency-characteristic */
typedef struct y_tapi_topology_T_network_topology_link_transfer_timing_latency_characteristic_ {
    dlq_hdr_t qhdr;
    xmlChar *fixed_latency_characteristic;
    xmlChar *jitter_characteristic;
    xmlChar *wander_characteristic;
    xmlChar *traffic_property_name;
    xmlChar *traffic_property_queing_latency;
} y_tapi_topology_T_network_topology_link_transfer_timing_latency_characteristic;

/* container /network-topology/link/transfer-timing */
typedef struct y_tapi_topology_T_network_topology_link_transfer_timing_ {
    dlq_hdr_t latency_characteristic;
} y_tapi_topology_T_network_topology_link_transfer_timing;

/* leaf-list /network-topology/link/risk-parameter/risk-characteristic/risk-identifier-list */
typedef struct y_tapi_topology_T_network_topology_link_risk_parameter_risk_characteristic_risk_identifier_list_ {
    dlq_hdr_t qhdr;
    xmlChar *risk_identifier_list;
} y_tapi_topology_T_network_topology_link_risk_parameter_risk_characteristic_risk_identifier_list;

/* list /network-topology/link/risk-parameter/risk-characteristic */
typedef struct y_tapi_topology_T_network_topology_link_risk_parameter_risk_characteristic_ {
    dlq_hdr_t qhdr;
    xmlChar *risk_characteristic_name;
    dlq_hdr_t risk_identifier_list;
} y_tapi_topology_T_network_topology_link_risk_parameter_risk_characteristic;

/* container /network-topology/link/risk-parameter */
typedef struct y_tapi_topology_T_network_topology_link_risk_parameter_ {
    dlq_hdr_t risk_characteristic;
} y_tapi_topology_T_network_topology_link_risk_parameter;

/* list /network-topology/link/validation/validation-mechanism */
typedef struct y_tapi_topology_T_network_topology_link_validation_validation_mechanism_ {
    dlq_hdr_t qhdr;
    xmlChar *validation_mechanism;
    xmlChar *layer_protocol_adjacency_validated;
    xmlChar *validation_robustness;
} y_tapi_topology_T_network_topology_link_validation_validation_mechanism;

/* container /network-topology/link/validation */
typedef struct y_tapi_topology_T_network_topology_link_validation_ {
    dlq_hdr_t validation_mechanism;
} y_tapi_topology_T_network_topology_link_validation;

/* leaf-list /network-topology/link/lp-transition/transitioned-layer-protocol-name */
typedef struct y_tapi_topology_T_network_topology_link_lp_transition_transitioned_layer_protocol_name_ {
    dlq_hdr_t qhdr;
    xmlChar *transitioned_layer_protocol_name;
} y_tapi_topology_T_network_topology_link_lp_transition_transitioned_layer_protocol_name;

/* leaf-list /network-topology/link/lp-transition/node-edge-point */
typedef struct y_tapi_topology_T_network_topology_link_lp_transition_node_edge_point_ {
    dlq_hdr_t qhdr;
    xmlChar *node_edge_point;
} y_tapi_topology_T_network_topology_link_lp_transition_node_edge_point;

/* container /network-topology/link/lp-transition */
typedef struct y_tapi_topology_T_network_topology_link_lp_transition_ {
    dlq_hdr_t transitioned_layer_protocol_name;
    dlq_hdr_t node_edge_point;
} y_tapi_topology_T_network_topology_link_lp_transition;

/* leaf-list /network-topology/link/layer-protocol-name */
typedef struct y_tapi_topology_T_network_topology_link_layer_protocol_name_ {
    dlq_hdr_t qhdr;
    xmlChar *layer_protocol_name;
} y_tapi_topology_T_network_topology_link_layer_protocol_name;

/* list /network-topology/link/name */
typedef struct y_tapi_topology_T_network_topology_link_name_ {
    dlq_hdr_t qhdr;
    xmlChar *value_name;
    xmlChar *value;
} y_tapi_topology_T_network_topology_link_name;

/* list /network-topology/link/label */
typedef struct y_tapi_topology_T_network_topology_link_label_ {
    dlq_hdr_t qhdr;
    xmlChar *value_name;
    xmlChar *value;
} y_tapi_topology_T_network_topology_link_label;

/* container /network-topology/link/extensions */
typedef struct y_tapi_topology_T_network_topology_link_extensions_ {
} y_tapi_topology_T_network_topology_link_extensions;

/* list /network-topology/link */
typedef struct y_tapi_topology_T_network_topology_link_ {
    dlq_hdr_t qhdr;
    dlq_hdr_t node_edge_point;
    dlq_hdr_t node;
    y_tapi_topology_T_network_topology_link_state state;
    y_tapi_topology_T_network_topology_link_transfer_capacity transfer_capacity;
    y_tapi_topology_T_network_topology_link_transfer_cost transfer_cost;
    y_tapi_topology_T_network_topology_link_transfer_integrity transfer_integrity;
    y_tapi_topology_T_network_topology_link_transfer_timing transfer_timing;
    y_tapi_topology_T_network_topology_link_risk_parameter risk_parameter;
    y_tapi_topology_T_network_topology_link_validation validation;
    y_tapi_topology_T_network_topology_link_lp_transition lp_transition;
    dlq_hdr_t layer_protocol_name;
    xmlChar *direction;
    xmlChar *uuid;
    dlq_hdr_t name;
    dlq_hdr_t label;
    y_tapi_topology_T_network_topology_link_extensions extensions;
} y_tapi_topology_T_network_topology_link;

/* leaf-list /network-topology/layer-protocol-name */
typedef struct y_tapi_topology_T_network_topology_layer_protocol_name_ {
    dlq_hdr_t qhdr;
    xmlChar *layer_protocol_name;
} y_tapi_topology_T_network_topology_layer_protocol_name;

/* list /network-topology/name */
typedef struct y_tapi_topology_T_network_topology_name_ {
    dlq_hdr_t qhdr;
    xmlChar *value_name;
    xmlChar *value;
} y_tapi_topology_T_network_topology_name;

/* list /network-topology/label */
typedef struct y_tapi_topology_T_network_topology_label_ {
    dlq_hdr_t qhdr;
    xmlChar *value_name;
    xmlChar *value;
} y_tapi_topology_T_network_topology_label;

/* container /network-topology/extensions */
typedef struct y_tapi_topology_T_network_topology_extensions_ {
} y_tapi_topology_T_network_topology_extensions;

/* list /network-topology */
typedef struct y_tapi_topology_T_network_topology_ {
    dlq_hdr_t qhdr;
    dlq_hdr_t node;
    dlq_hdr_t link;
    dlq_hdr_t layer_protocol_name;
    xmlChar *uuid;
    dlq_hdr_t name;
    dlq_hdr_t label;
    y_tapi_topology_T_network_topology_extensions extensions;
} y_tapi_topology_T_network_topology;

/* container /get-topology-details/input */
typedef struct y_tapi_topology_T_get_topology_details_input_ {
    xmlChar *topology_id_or_name;
} y_tapi_topology_T_get_topology_details_input;

/* list /get-topology-details/output/topology/node/owned-node-edge-point/layer-protocol/name */
typedef struct y_tapi_topology_T_get_topology_details_output_topology_node_owned_node_edge_point_layer_protocol_name_ {
    dlq_hdr_t qhdr;
    xmlChar *value_name;
    xmlChar *value;
} y_tapi_topology_T_get_topology_details_output_topology_node_owned_node_edge_point_layer_protocol_name;

/* container /get-topology-details/output/topology/node/owned-node-edge-point/layer-protocol/extensions */
typedef struct y_tapi_topology_T_get_topology_details_output_topology_node_owned_node_edge_point_layer_protocol_extensions_ {
} y_tapi_topology_T_get_topology_details_output_topology_node_owned_node_edge_point_layer_protocol_extensions;

/* list /get-topology-details/output/topology/node/owned-node-edge-point/layer-protocol */
typedef struct y_tapi_topology_T_get_topology_details_output_topology_node_owned_node_edge_point_layer_protocol_ {
    dlq_hdr_t qhdr;
    xmlChar *layer_protocol_name;
    xmlChar *termination_direction;
    xmlChar *termination_state;
    xmlChar *local_id;
    dlq_hdr_t name;
    y_tapi_topology_T_get_topology_details_output_topology_node_owned_node_edge_point_layer_protocol_extensions extensions;
} y_tapi_topology_T_get_topology_details_output_topology_node_owned_node_edge_point_layer_protocol;

/* leaf-list /get-topology-details/output/topology/node/owned-node-edge-point/client-node-edge-point */
typedef struct y_tapi_topology_T_get_topology_details_output_topology_node_owned_node_edge_point_client_node_edge_point_ {
    dlq_hdr_t qhdr;
    xmlChar *client_node_edge_point;
} y_tapi_topology_T_get_topology_details_output_topology_node_owned_node_edge_point_client_node_edge_point;

/* leaf-list /get-topology-details/output/topology/node/owned-node-edge-point/mapped-service-end-point */
typedef struct y_tapi_topology_T_get_topology_details_output_topology_node_owned_node_edge_point_mapped_service_end_point_ {
    dlq_hdr_t qhdr;
    xmlChar *mapped_service_end_point;
} y_tapi_topology_T_get_topology_details_output_topology_node_owned_node_edge_point_mapped_service_end_point;

/* container /get-topology-details/output/topology/node/owned-node-edge-point/state */
typedef struct y_tapi_topology_T_get_topology_details_output_topology_node_owned_node_edge_point_state_ {
    xmlChar *administrative_state;
    xmlChar *operational_state;
    xmlChar *lifecycle_state;
} y_tapi_topology_T_get_topology_details_output_topology_node_owned_node_edge_point_state;

/* list /get-topology-details/output/topology/node/owned-node-edge-point/name */
typedef struct y_tapi_topology_T_get_topology_details_output_topology_node_owned_node_edge_point_name_ {
    dlq_hdr_t qhdr;
    xmlChar *value_name;
    xmlChar *value;
} y_tapi_topology_T_get_topology_details_output_topology_node_owned_node_edge_point_name;

/* list /get-topology-details/output/topology/node/owned-node-edge-point/label */
typedef struct y_tapi_topology_T_get_topology_details_output_topology_node_owned_node_edge_point_label_ {
    dlq_hdr_t qhdr;
    xmlChar *value_name;
    xmlChar *value;
} y_tapi_topology_T_get_topology_details_output_topology_node_owned_node_edge_point_label;

/* container /get-topology-details/output/topology/node/owned-node-edge-point/extensions */
typedef struct y_tapi_topology_T_get_topology_details_output_topology_node_owned_node_edge_point_extensions_ {
} y_tapi_topology_T_get_topology_details_output_topology_node_owned_node_edge_point_extensions;

/* list /get-topology-details/output/topology/node/owned-node-edge-point */
typedef struct y_tapi_topology_T_get_topology_details_output_topology_node_owned_node_edge_point_ {
    dlq_hdr_t qhdr;
    dlq_hdr_t layer_protocol;
    dlq_hdr_t client_node_edge_point;
    dlq_hdr_t mapped_service_end_point;
    y_tapi_topology_T_get_topology_details_output_topology_node_owned_node_edge_point_state state;
    xmlChar *termination_direction;
    xmlChar *link_port_direction;
    xmlChar *link_port_role;
    xmlChar *uuid;
    dlq_hdr_t name;
    dlq_hdr_t label;
    y_tapi_topology_T_get_topology_details_output_topology_node_owned_node_edge_point_extensions extensions;
} y_tapi_topology_T_get_topology_details_output_topology_node_owned_node_edge_point;

/* leaf-list /get-topology-details/output/topology/node/aggregated-node-edge-point */
typedef struct y_tapi_topology_T_get_topology_details_output_topology_node_aggregated_node_edge_point_ {
    dlq_hdr_t qhdr;
    xmlChar *aggregated_node_edge_point;
} y_tapi_topology_T_get_topology_details_output_topology_node_aggregated_node_edge_point;

/* container /get-topology-details/output/topology/node/state */
typedef struct y_tapi_topology_T_get_topology_details_output_topology_node_state_ {
    xmlChar *administrative_state;
    xmlChar *operational_state;
    xmlChar *lifecycle_state;
} y_tapi_topology_T_get_topology_details_output_topology_node_state;

/* container /get-topology-details/output/topology/node/transfer-capacity/total-potential-capacity */
typedef struct y_tapi_topology_T_get_topology_details_output_topology_node_transfer_capacity_total_potential_capacity_ {
    xmlChar *total_size;
    xmlChar *packet_bw_profile_type;
    uint64 committed_information_rate;
    uint64 committed_burst_size;
    uint64 peak_information_rate;
    uint64 peak_burst_size;
    boolean color_aware;
    boolean coupling_flag;
} y_tapi_topology_T_get_topology_details_output_topology_node_transfer_capacity_total_potential_capacity;

/* container /get-topology-details/output/topology/node/transfer-capacity/available-capacity */
typedef struct y_tapi_topology_T_get_topology_details_output_topology_node_transfer_capacity_available_capacity_ {
    xmlChar *total_size;
    xmlChar *packet_bw_profile_type;
    uint64 committed_information_rate;
    uint64 committed_burst_size;
    uint64 peak_information_rate;
    uint64 peak_burst_size;
    boolean color_aware;
    boolean coupling_flag;
} y_tapi_topology_T_get_topology_details_output_topology_node_transfer_capacity_available_capacity;

/* list /get-topology-details/output/topology/node/transfer-capacity/capacity-assigned-to-user-view */
typedef struct y_tapi_topology_T_get_topology_details_output_topology_node_transfer_capacity_capacity_assigned_to_user_view_ {
    dlq_hdr_t qhdr;
    xmlChar *total_size;
    xmlChar *packet_bw_profile_type;
    uint64 committed_information_rate;
    uint64 committed_burst_size;
    uint64 peak_information_rate;
    uint64 peak_burst_size;
    boolean color_aware;
    boolean coupling_flag;
} y_tapi_topology_T_get_topology_details_output_topology_node_transfer_capacity_capacity_assigned_to_user_view;

/* container /get-topology-details/output/topology/node/transfer-capacity */
typedef struct y_tapi_topology_T_get_topology_details_output_topology_node_transfer_capacity_ {
    y_tapi_topology_T_get_topology_details_output_topology_node_transfer_capacity_total_potential_capacity total_potential_capacity;
    y_tapi_topology_T_get_topology_details_output_topology_node_transfer_capacity_available_capacity available_capacity;
    dlq_hdr_t capacity_assigned_to_user_view;
    xmlChar *capacity_interaction_algorithm;
} y_tapi_topology_T_get_topology_details_output_topology_node_transfer_capacity;

/* list /get-topology-details/output/topology/node/transfer-cost/cost-characteristic */
typedef struct y_tapi_topology_T_get_topology_details_output_topology_node_transfer_cost_cost_characteristic_ {
    dlq_hdr_t qhdr;
    xmlChar *cost_name;
    xmlChar *cost_value;
    xmlChar *cost_algorithm;
} y_tapi_topology_T_get_topology_details_output_topology_node_transfer_cost_cost_characteristic;

/* container /get-topology-details/output/topology/node/transfer-cost */
typedef struct y_tapi_topology_T_get_topology_details_output_topology_node_transfer_cost_ {
    dlq_hdr_t cost_characteristic;
} y_tapi_topology_T_get_topology_details_output_topology_node_transfer_cost;

/* container /get-topology-details/output/topology/node/transfer-integrity */
typedef struct y_tapi_topology_T_get_topology_details_output_topology_node_transfer_integrity_ {
    xmlChar *error_characteristic;
    xmlChar *loss_characteristic;
    xmlChar *repeat_delivery_characteristic;
    xmlChar *delivery_order_characteristic;
    xmlChar *unavailable_time_characteristic;
    xmlChar *server_integrity_process_characteristic;
} y_tapi_topology_T_get_topology_details_output_topology_node_transfer_integrity;

/* list /get-topology-details/output/topology/node/transfer-timing/latency-characteristic */
typedef struct y_tapi_topology_T_get_topology_details_output_topology_node_transfer_timing_latency_characteristic_ {
    dlq_hdr_t qhdr;
    xmlChar *fixed_latency_characteristic;
    xmlChar *jitter_characteristic;
    xmlChar *wander_characteristic;
    xmlChar *traffic_property_name;
    xmlChar *traffic_property_queing_latency;
} y_tapi_topology_T_get_topology_details_output_topology_node_transfer_timing_latency_characteristic;

/* container /get-topology-details/output/topology/node/transfer-timing */
typedef struct y_tapi_topology_T_get_topology_details_output_topology_node_transfer_timing_ {
    dlq_hdr_t latency_characteristic;
} y_tapi_topology_T_get_topology_details_output_topology_node_transfer_timing;

/* leaf-list /get-topology-details/output/topology/node/layer-protocol-name */
typedef struct y_tapi_topology_T_get_topology_details_output_topology_node_layer_protocol_name_ {
    dlq_hdr_t qhdr;
    xmlChar *layer_protocol_name;
} y_tapi_topology_T_get_topology_details_output_topology_node_layer_protocol_name;

/* list /get-topology-details/output/topology/node/name */
typedef struct y_tapi_topology_T_get_topology_details_output_topology_node_name_ {
    dlq_hdr_t qhdr;
    xmlChar *value_name;
    xmlChar *value;
} y_tapi_topology_T_get_topology_details_output_topology_node_name;

/* list /get-topology-details/output/topology/node/label */
typedef struct y_tapi_topology_T_get_topology_details_output_topology_node_label_ {
    dlq_hdr_t qhdr;
    xmlChar *value_name;
    xmlChar *value;
} y_tapi_topology_T_get_topology_details_output_topology_node_label;

/* container /get-topology-details/output/topology/node/extensions */
typedef struct y_tapi_topology_T_get_topology_details_output_topology_node_extensions_ {
} y_tapi_topology_T_get_topology_details_output_topology_node_extensions;

/* list /get-topology-details/output/topology/node */
typedef struct y_tapi_topology_T_get_topology_details_output_topology_node_ {
    dlq_hdr_t qhdr;
    dlq_hdr_t owned_node_edge_point;
    dlq_hdr_t aggregated_node_edge_point;
    xmlChar *encap_topology;
    y_tapi_topology_T_get_topology_details_output_topology_node_state state;
    y_tapi_topology_T_get_topology_details_output_topology_node_transfer_capacity transfer_capacity;
    y_tapi_topology_T_get_topology_details_output_topology_node_transfer_cost transfer_cost;
    y_tapi_topology_T_get_topology_details_output_topology_node_transfer_integrity transfer_integrity;
    y_tapi_topology_T_get_topology_details_output_topology_node_transfer_timing transfer_timing;
    dlq_hdr_t layer_protocol_name;
    xmlChar *uuid;
    dlq_hdr_t name;
    dlq_hdr_t label;
    y_tapi_topology_T_get_topology_details_output_topology_node_extensions extensions;
} y_tapi_topology_T_get_topology_details_output_topology_node;

/* leaf-list /get-topology-details/output/topology/link/node-edge-point */
typedef struct y_tapi_topology_T_get_topology_details_output_topology_link_node_edge_point_ {
    dlq_hdr_t qhdr;
    xmlChar *node_edge_point;
} y_tapi_topology_T_get_topology_details_output_topology_link_node_edge_point;

/* leaf-list /get-topology-details/output/topology/link/node */
typedef struct y_tapi_topology_T_get_topology_details_output_topology_link_node_ {
    dlq_hdr_t qhdr;
    xmlChar *node;
} y_tapi_topology_T_get_topology_details_output_topology_link_node;

/* container /get-topology-details/output/topology/link/state */
typedef struct y_tapi_topology_T_get_topology_details_output_topology_link_state_ {
    xmlChar *administrative_state;
    xmlChar *operational_state;
    xmlChar *lifecycle_state;
} y_tapi_topology_T_get_topology_details_output_topology_link_state;

/* container /get-topology-details/output/topology/link/transfer-capacity/total-potential-capacity */
typedef struct y_tapi_topology_T_get_topology_details_output_topology_link_transfer_capacity_total_potential_capacity_ {
    xmlChar *total_size;
    xmlChar *packet_bw_profile_type;
    uint64 committed_information_rate;
    uint64 committed_burst_size;
    uint64 peak_information_rate;
    uint64 peak_burst_size;
    boolean color_aware;
    boolean coupling_flag;
} y_tapi_topology_T_get_topology_details_output_topology_link_transfer_capacity_total_potential_capacity;

/* container /get-topology-details/output/topology/link/transfer-capacity/available-capacity */
typedef struct y_tapi_topology_T_get_topology_details_output_topology_link_transfer_capacity_available_capacity_ {
    xmlChar *total_size;
    xmlChar *packet_bw_profile_type;
    uint64 committed_information_rate;
    uint64 committed_burst_size;
    uint64 peak_information_rate;
    uint64 peak_burst_size;
    boolean color_aware;
    boolean coupling_flag;
} y_tapi_topology_T_get_topology_details_output_topology_link_transfer_capacity_available_capacity;

/* list /get-topology-details/output/topology/link/transfer-capacity/capacity-assigned-to-user-view */
typedef struct y_tapi_topology_T_get_topology_details_output_topology_link_transfer_capacity_capacity_assigned_to_user_view_ {
    dlq_hdr_t qhdr;
    xmlChar *total_size;
    xmlChar *packet_bw_profile_type;
    uint64 committed_information_rate;
    uint64 committed_burst_size;
    uint64 peak_information_rate;
    uint64 peak_burst_size;
    boolean color_aware;
    boolean coupling_flag;
} y_tapi_topology_T_get_topology_details_output_topology_link_transfer_capacity_capacity_assigned_to_user_view;

/* container /get-topology-details/output/topology/link/transfer-capacity */
typedef struct y_tapi_topology_T_get_topology_details_output_topology_link_transfer_capacity_ {
    y_tapi_topology_T_get_topology_details_output_topology_link_transfer_capacity_total_potential_capacity total_potential_capacity;
    y_tapi_topology_T_get_topology_details_output_topology_link_transfer_capacity_available_capacity available_capacity;
    dlq_hdr_t capacity_assigned_to_user_view;
    xmlChar *capacity_interaction_algorithm;
} y_tapi_topology_T_get_topology_details_output_topology_link_transfer_capacity;

/* list /get-topology-details/output/topology/link/transfer-cost/cost-characteristic */
typedef struct y_tapi_topology_T_get_topology_details_output_topology_link_transfer_cost_cost_characteristic_ {
    dlq_hdr_t qhdr;
    xmlChar *cost_name;
    xmlChar *cost_value;
    xmlChar *cost_algorithm;
} y_tapi_topology_T_get_topology_details_output_topology_link_transfer_cost_cost_characteristic;

/* container /get-topology-details/output/topology/link/transfer-cost */
typedef struct y_tapi_topology_T_get_topology_details_output_topology_link_transfer_cost_ {
    dlq_hdr_t cost_characteristic;
} y_tapi_topology_T_get_topology_details_output_topology_link_transfer_cost;

/* container /get-topology-details/output/topology/link/transfer-integrity */
typedef struct y_tapi_topology_T_get_topology_details_output_topology_link_transfer_integrity_ {
    xmlChar *error_characteristic;
    xmlChar *loss_characteristic;
    xmlChar *repeat_delivery_characteristic;
    xmlChar *delivery_order_characteristic;
    xmlChar *unavailable_time_characteristic;
    xmlChar *server_integrity_process_characteristic;
} y_tapi_topology_T_get_topology_details_output_topology_link_transfer_integrity;

/* list /get-topology-details/output/topology/link/transfer-timing/latency-characteristic */
typedef struct y_tapi_topology_T_get_topology_details_output_topology_link_transfer_timing_latency_characteristic_ {
    dlq_hdr_t qhdr;
    xmlChar *fixed_latency_characteristic;
    xmlChar *jitter_characteristic;
    xmlChar *wander_characteristic;
    xmlChar *traffic_property_name;
    xmlChar *traffic_property_queing_latency;
} y_tapi_topology_T_get_topology_details_output_topology_link_transfer_timing_latency_characteristic;

/* container /get-topology-details/output/topology/link/transfer-timing */
typedef struct y_tapi_topology_T_get_topology_details_output_topology_link_transfer_timing_ {
    dlq_hdr_t latency_characteristic;
} y_tapi_topology_T_get_topology_details_output_topology_link_transfer_timing;

/* leaf-list /get-topology-details/output/topology/link/risk-parameter/risk-characteristic/risk-identifier-list */
typedef struct y_tapi_topology_T_get_topology_details_output_topology_link_risk_parameter_risk_characteristic_risk_identifier_list_ {
    dlq_hdr_t qhdr;
    xmlChar *risk_identifier_list;
} y_tapi_topology_T_get_topology_details_output_topology_link_risk_parameter_risk_characteristic_risk_identifier_list;

/* list /get-topology-details/output/topology/link/risk-parameter/risk-characteristic */
typedef struct y_tapi_topology_T_get_topology_details_output_topology_link_risk_parameter_risk_characteristic_ {
    dlq_hdr_t qhdr;
    xmlChar *risk_characteristic_name;
    dlq_hdr_t risk_identifier_list;
} y_tapi_topology_T_get_topology_details_output_topology_link_risk_parameter_risk_characteristic;

/* container /get-topology-details/output/topology/link/risk-parameter */
typedef struct y_tapi_topology_T_get_topology_details_output_topology_link_risk_parameter_ {
    dlq_hdr_t risk_characteristic;
} y_tapi_topology_T_get_topology_details_output_topology_link_risk_parameter;

/* list /get-topology-details/output/topology/link/validation/validation-mechanism */
typedef struct y_tapi_topology_T_get_topology_details_output_topology_link_validation_validation_mechanism_ {
    dlq_hdr_t qhdr;
    xmlChar *validation_mechanism;
    xmlChar *layer_protocol_adjacency_validated;
    xmlChar *validation_robustness;
} y_tapi_topology_T_get_topology_details_output_topology_link_validation_validation_mechanism;

/* container /get-topology-details/output/topology/link/validation */
typedef struct y_tapi_topology_T_get_topology_details_output_topology_link_validation_ {
    dlq_hdr_t validation_mechanism;
} y_tapi_topology_T_get_topology_details_output_topology_link_validation;

/* leaf-list /get-topology-details/output/topology/link/lp-transition/transitioned-layer-protocol-name */
typedef struct y_tapi_topology_T_get_topology_details_output_topology_link_lp_transition_transitioned_layer_protocol_name_ {
    dlq_hdr_t qhdr;
    xmlChar *transitioned_layer_protocol_name;
} y_tapi_topology_T_get_topology_details_output_topology_link_lp_transition_transitioned_layer_protocol_name;

/* leaf-list /get-topology-details/output/topology/link/lp-transition/node-edge-point */
typedef struct y_tapi_topology_T_get_topology_details_output_topology_link_lp_transition_node_edge_point_ {
    dlq_hdr_t qhdr;
    xmlChar *node_edge_point;
} y_tapi_topology_T_get_topology_details_output_topology_link_lp_transition_node_edge_point;

/* container /get-topology-details/output/topology/link/lp-transition */
typedef struct y_tapi_topology_T_get_topology_details_output_topology_link_lp_transition_ {
    dlq_hdr_t transitioned_layer_protocol_name;
    dlq_hdr_t node_edge_point;
} y_tapi_topology_T_get_topology_details_output_topology_link_lp_transition;

/* leaf-list /get-topology-details/output/topology/link/layer-protocol-name */
typedef struct y_tapi_topology_T_get_topology_details_output_topology_link_layer_protocol_name_ {
    dlq_hdr_t qhdr;
    xmlChar *layer_protocol_name;
} y_tapi_topology_T_get_topology_details_output_topology_link_layer_protocol_name;

/* list /get-topology-details/output/topology/link/name */
typedef struct y_tapi_topology_T_get_topology_details_output_topology_link_name_ {
    dlq_hdr_t qhdr;
    xmlChar *value_name;
    xmlChar *value;
} y_tapi_topology_T_get_topology_details_output_topology_link_name;

/* list /get-topology-details/output/topology/link/label */
typedef struct y_tapi_topology_T_get_topology_details_output_topology_link_label_ {
    dlq_hdr_t qhdr;
    xmlChar *value_name;
    xmlChar *value;
} y_tapi_topology_T_get_topology_details_output_topology_link_label;

/* container /get-topology-details/output/topology/link/extensions */
typedef struct y_tapi_topology_T_get_topology_details_output_topology_link_extensions_ {
} y_tapi_topology_T_get_topology_details_output_topology_link_extensions;

/* list /get-topology-details/output/topology/link */
typedef struct y_tapi_topology_T_get_topology_details_output_topology_link_ {
    dlq_hdr_t qhdr;
    dlq_hdr_t node_edge_point;
    dlq_hdr_t node;
    y_tapi_topology_T_get_topology_details_output_topology_link_state state;
    y_tapi_topology_T_get_topology_details_output_topology_link_transfer_capacity transfer_capacity;
    y_tapi_topology_T_get_topology_details_output_topology_link_transfer_cost transfer_cost;
    y_tapi_topology_T_get_topology_details_output_topology_link_transfer_integrity transfer_integrity;
    y_tapi_topology_T_get_topology_details_output_topology_link_transfer_timing transfer_timing;
    y_tapi_topology_T_get_topology_details_output_topology_link_risk_parameter risk_parameter;
    y_tapi_topology_T_get_topology_details_output_topology_link_validation validation;
    y_tapi_topology_T_get_topology_details_output_topology_link_lp_transition lp_transition;
    dlq_hdr_t layer_protocol_name;
    xmlChar *direction;
    xmlChar *uuid;
    dlq_hdr_t name;
    dlq_hdr_t label;
    y_tapi_topology_T_get_topology_details_output_topology_link_extensions extensions;
} y_tapi_topology_T_get_topology_details_output_topology_link;

/* leaf-list /get-topology-details/output/topology/layer-protocol-name */
typedef struct y_tapi_topology_T_get_topology_details_output_topology_layer_protocol_name_ {
    dlq_hdr_t qhdr;
    xmlChar *layer_protocol_name;
} y_tapi_topology_T_get_topology_details_output_topology_layer_protocol_name;

/* container /get-topology-details/output/topology */
typedef struct y_tapi_topology_T_get_topology_details_output_topology_ {
    dlq_hdr_t node;
    dlq_hdr_t link;
    dlq_hdr_t layer_protocol_name;
} y_tapi_topology_T_get_topology_details_output_topology;

/* container /get-topology-details/output */
typedef struct y_tapi_topology_T_get_topology_details_output_ {
    y_tapi_topology_T_get_topology_details_output_topology topology;
} y_tapi_topology_T_get_topology_details_output;

/* rpc /get-topology-details */
typedef struct y_tapi_topology_T_get_topology_details_ {
    y_tapi_topology_T_get_topology_details_input input;
    y_tapi_topology_T_get_topology_details_output output;
} y_tapi_topology_T_get_topology_details;

/* container /get-node-details/input */
typedef struct y_tapi_topology_T_get_node_details_input_ {
    xmlChar *topology_id_or_name;
    xmlChar *node_id_or_name;
} y_tapi_topology_T_get_node_details_input;

/* list /get-node-details/output/node/owned-node-edge-point/layer-protocol/name */
typedef struct y_tapi_topology_T_get_node_details_output_node_owned_node_edge_point_layer_protocol_name_ {
    dlq_hdr_t qhdr;
    xmlChar *value_name;
    xmlChar *value;
} y_tapi_topology_T_get_node_details_output_node_owned_node_edge_point_layer_protocol_name;

/* container /get-node-details/output/node/owned-node-edge-point/layer-protocol/extensions */
typedef struct y_tapi_topology_T_get_node_details_output_node_owned_node_edge_point_layer_protocol_extensions_ {
} y_tapi_topology_T_get_node_details_output_node_owned_node_edge_point_layer_protocol_extensions;

/* list /get-node-details/output/node/owned-node-edge-point/layer-protocol */
typedef struct y_tapi_topology_T_get_node_details_output_node_owned_node_edge_point_layer_protocol_ {
    dlq_hdr_t qhdr;
    xmlChar *layer_protocol_name;
    xmlChar *termination_direction;
    xmlChar *termination_state;
    xmlChar *local_id;
    dlq_hdr_t name;
    y_tapi_topology_T_get_node_details_output_node_owned_node_edge_point_layer_protocol_extensions extensions;
} y_tapi_topology_T_get_node_details_output_node_owned_node_edge_point_layer_protocol;

/* leaf-list /get-node-details/output/node/owned-node-edge-point/client-node-edge-point */
typedef struct y_tapi_topology_T_get_node_details_output_node_owned_node_edge_point_client_node_edge_point_ {
    dlq_hdr_t qhdr;
    xmlChar *client_node_edge_point;
} y_tapi_topology_T_get_node_details_output_node_owned_node_edge_point_client_node_edge_point;

/* leaf-list /get-node-details/output/node/owned-node-edge-point/mapped-service-end-point */
typedef struct y_tapi_topology_T_get_node_details_output_node_owned_node_edge_point_mapped_service_end_point_ {
    dlq_hdr_t qhdr;
    xmlChar *mapped_service_end_point;
} y_tapi_topology_T_get_node_details_output_node_owned_node_edge_point_mapped_service_end_point;

/* container /get-node-details/output/node/owned-node-edge-point/state */
typedef struct y_tapi_topology_T_get_node_details_output_node_owned_node_edge_point_state_ {
    xmlChar *administrative_state;
    xmlChar *operational_state;
    xmlChar *lifecycle_state;
} y_tapi_topology_T_get_node_details_output_node_owned_node_edge_point_state;

/* list /get-node-details/output/node/owned-node-edge-point/name */
typedef struct y_tapi_topology_T_get_node_details_output_node_owned_node_edge_point_name_ {
    dlq_hdr_t qhdr;
    xmlChar *value_name;
    xmlChar *value;
} y_tapi_topology_T_get_node_details_output_node_owned_node_edge_point_name;

/* list /get-node-details/output/node/owned-node-edge-point/label */
typedef struct y_tapi_topology_T_get_node_details_output_node_owned_node_edge_point_label_ {
    dlq_hdr_t qhdr;
    xmlChar *value_name;
    xmlChar *value;
} y_tapi_topology_T_get_node_details_output_node_owned_node_edge_point_label;

/* container /get-node-details/output/node/owned-node-edge-point/extensions */
typedef struct y_tapi_topology_T_get_node_details_output_node_owned_node_edge_point_extensions_ {
} y_tapi_topology_T_get_node_details_output_node_owned_node_edge_point_extensions;

/* list /get-node-details/output/node/owned-node-edge-point */
typedef struct y_tapi_topology_T_get_node_details_output_node_owned_node_edge_point_ {
    dlq_hdr_t qhdr;
    dlq_hdr_t layer_protocol;
    dlq_hdr_t client_node_edge_point;
    dlq_hdr_t mapped_service_end_point;
    y_tapi_topology_T_get_node_details_output_node_owned_node_edge_point_state state;
    xmlChar *termination_direction;
    xmlChar *link_port_direction;
    xmlChar *link_port_role;
    xmlChar *uuid;
    dlq_hdr_t name;
    dlq_hdr_t label;
    y_tapi_topology_T_get_node_details_output_node_owned_node_edge_point_extensions extensions;
} y_tapi_topology_T_get_node_details_output_node_owned_node_edge_point;

/* leaf-list /get-node-details/output/node/aggregated-node-edge-point */
typedef struct y_tapi_topology_T_get_node_details_output_node_aggregated_node_edge_point_ {
    dlq_hdr_t qhdr;
    xmlChar *aggregated_node_edge_point;
} y_tapi_topology_T_get_node_details_output_node_aggregated_node_edge_point;

/* container /get-node-details/output/node/state */
typedef struct y_tapi_topology_T_get_node_details_output_node_state_ {
    xmlChar *administrative_state;
    xmlChar *operational_state;
    xmlChar *lifecycle_state;
} y_tapi_topology_T_get_node_details_output_node_state;

/* container /get-node-details/output/node/transfer-capacity/total-potential-capacity */
typedef struct y_tapi_topology_T_get_node_details_output_node_transfer_capacity_total_potential_capacity_ {
    xmlChar *total_size;
    xmlChar *packet_bw_profile_type;
    uint64 committed_information_rate;
    uint64 committed_burst_size;
    uint64 peak_information_rate;
    uint64 peak_burst_size;
    boolean color_aware;
    boolean coupling_flag;
} y_tapi_topology_T_get_node_details_output_node_transfer_capacity_total_potential_capacity;

/* container /get-node-details/output/node/transfer-capacity/available-capacity */
typedef struct y_tapi_topology_T_get_node_details_output_node_transfer_capacity_available_capacity_ {
    xmlChar *total_size;
    xmlChar *packet_bw_profile_type;
    uint64 committed_information_rate;
    uint64 committed_burst_size;
    uint64 peak_information_rate;
    uint64 peak_burst_size;
    boolean color_aware;
    boolean coupling_flag;
} y_tapi_topology_T_get_node_details_output_node_transfer_capacity_available_capacity;

/* list /get-node-details/output/node/transfer-capacity/capacity-assigned-to-user-view */
typedef struct y_tapi_topology_T_get_node_details_output_node_transfer_capacity_capacity_assigned_to_user_view_ {
    dlq_hdr_t qhdr;
    xmlChar *total_size;
    xmlChar *packet_bw_profile_type;
    uint64 committed_information_rate;
    uint64 committed_burst_size;
    uint64 peak_information_rate;
    uint64 peak_burst_size;
    boolean color_aware;
    boolean coupling_flag;
} y_tapi_topology_T_get_node_details_output_node_transfer_capacity_capacity_assigned_to_user_view;

/* container /get-node-details/output/node/transfer-capacity */
typedef struct y_tapi_topology_T_get_node_details_output_node_transfer_capacity_ {
    y_tapi_topology_T_get_node_details_output_node_transfer_capacity_total_potential_capacity total_potential_capacity;
    y_tapi_topology_T_get_node_details_output_node_transfer_capacity_available_capacity available_capacity;
    dlq_hdr_t capacity_assigned_to_user_view;
    xmlChar *capacity_interaction_algorithm;
} y_tapi_topology_T_get_node_details_output_node_transfer_capacity;

/* list /get-node-details/output/node/transfer-cost/cost-characteristic */
typedef struct y_tapi_topology_T_get_node_details_output_node_transfer_cost_cost_characteristic_ {
    dlq_hdr_t qhdr;
    xmlChar *cost_name;
    xmlChar *cost_value;
    xmlChar *cost_algorithm;
} y_tapi_topology_T_get_node_details_output_node_transfer_cost_cost_characteristic;

/* container /get-node-details/output/node/transfer-cost */
typedef struct y_tapi_topology_T_get_node_details_output_node_transfer_cost_ {
    dlq_hdr_t cost_characteristic;
} y_tapi_topology_T_get_node_details_output_node_transfer_cost;

/* container /get-node-details/output/node/transfer-integrity */
typedef struct y_tapi_topology_T_get_node_details_output_node_transfer_integrity_ {
    xmlChar *error_characteristic;
    xmlChar *loss_characteristic;
    xmlChar *repeat_delivery_characteristic;
    xmlChar *delivery_order_characteristic;
    xmlChar *unavailable_time_characteristic;
    xmlChar *server_integrity_process_characteristic;
} y_tapi_topology_T_get_node_details_output_node_transfer_integrity;

/* list /get-node-details/output/node/transfer-timing/latency-characteristic */
typedef struct y_tapi_topology_T_get_node_details_output_node_transfer_timing_latency_characteristic_ {
    dlq_hdr_t qhdr;
    xmlChar *fixed_latency_characteristic;
    xmlChar *jitter_characteristic;
    xmlChar *wander_characteristic;
    xmlChar *traffic_property_name;
    xmlChar *traffic_property_queing_latency;
} y_tapi_topology_T_get_node_details_output_node_transfer_timing_latency_characteristic;

/* container /get-node-details/output/node/transfer-timing */
typedef struct y_tapi_topology_T_get_node_details_output_node_transfer_timing_ {
    dlq_hdr_t latency_characteristic;
} y_tapi_topology_T_get_node_details_output_node_transfer_timing;

/* leaf-list /get-node-details/output/node/layer-protocol-name */
typedef struct y_tapi_topology_T_get_node_details_output_node_layer_protocol_name_ {
    dlq_hdr_t qhdr;
    xmlChar *layer_protocol_name;
} y_tapi_topology_T_get_node_details_output_node_layer_protocol_name;

/* list /get-node-details/output/node/name */
typedef struct y_tapi_topology_T_get_node_details_output_node_name_ {
    dlq_hdr_t qhdr;
    xmlChar *value_name;
    xmlChar *value;
} y_tapi_topology_T_get_node_details_output_node_name;

/* list /get-node-details/output/node/label */
typedef struct y_tapi_topology_T_get_node_details_output_node_label_ {
    dlq_hdr_t qhdr;
    xmlChar *value_name;
    xmlChar *value;
} y_tapi_topology_T_get_node_details_output_node_label;

/* container /get-node-details/output/node/extensions */
typedef struct y_tapi_topology_T_get_node_details_output_node_extensions_ {
} y_tapi_topology_T_get_node_details_output_node_extensions;

/* container /get-node-details/output/node */
typedef struct y_tapi_topology_T_get_node_details_output_node_ {
    dlq_hdr_t owned_node_edge_point;
    dlq_hdr_t aggregated_node_edge_point;
    xmlChar *encap_topology;
    y_tapi_topology_T_get_node_details_output_node_state state;
    y_tapi_topology_T_get_node_details_output_node_transfer_capacity transfer_capacity;
    y_tapi_topology_T_get_node_details_output_node_transfer_cost transfer_cost;
    y_tapi_topology_T_get_node_details_output_node_transfer_integrity transfer_integrity;
    y_tapi_topology_T_get_node_details_output_node_transfer_timing transfer_timing;
    dlq_hdr_t layer_protocol_name;
    xmlChar *uuid;
    dlq_hdr_t name;
    dlq_hdr_t label;
    y_tapi_topology_T_get_node_details_output_node_extensions extensions;
} y_tapi_topology_T_get_node_details_output_node;

/* container /get-node-details/output */
typedef struct y_tapi_topology_T_get_node_details_output_ {
    y_tapi_topology_T_get_node_details_output_node node;
} y_tapi_topology_T_get_node_details_output;

/* rpc /get-node-details */
typedef struct y_tapi_topology_T_get_node_details_ {
    y_tapi_topology_T_get_node_details_input input;
    y_tapi_topology_T_get_node_details_output output;
} y_tapi_topology_T_get_node_details;

/* container /get-node-edge-point-details/input */
typedef struct y_tapi_topology_T_get_node_edge_point_details_input_ {
    xmlChar *topology_id_or_name;
    xmlChar *node_id_or_name;
    xmlChar *ep_id_or_name;
} y_tapi_topology_T_get_node_edge_point_details_input;

/* list /get-node-edge-point-details/output/node-edge-point/layer-protocol/name */
typedef struct y_tapi_topology_T_get_node_edge_point_details_output_node_edge_point_layer_protocol_name_ {
    dlq_hdr_t qhdr;
    xmlChar *value_name;
    xmlChar *value;
} y_tapi_topology_T_get_node_edge_point_details_output_node_edge_point_layer_protocol_name;

/* container /get-node-edge-point-details/output/node-edge-point/layer-protocol/extensions */
typedef struct y_tapi_topology_T_get_node_edge_point_details_output_node_edge_point_layer_protocol_extensions_ {
} y_tapi_topology_T_get_node_edge_point_details_output_node_edge_point_layer_protocol_extensions;

/* list /get-node-edge-point-details/output/node-edge-point/layer-protocol */
typedef struct y_tapi_topology_T_get_node_edge_point_details_output_node_edge_point_layer_protocol_ {
    dlq_hdr_t qhdr;
    xmlChar *layer_protocol_name;
    xmlChar *termination_direction;
    xmlChar *termination_state;
    xmlChar *local_id;
    dlq_hdr_t name;
    y_tapi_topology_T_get_node_edge_point_details_output_node_edge_point_layer_protocol_extensions extensions;
} y_tapi_topology_T_get_node_edge_point_details_output_node_edge_point_layer_protocol;

/* leaf-list /get-node-edge-point-details/output/node-edge-point/client-node-edge-point */
typedef struct y_tapi_topology_T_get_node_edge_point_details_output_node_edge_point_client_node_edge_point_ {
    dlq_hdr_t qhdr;
    xmlChar *client_node_edge_point;
} y_tapi_topology_T_get_node_edge_point_details_output_node_edge_point_client_node_edge_point;

/* leaf-list /get-node-edge-point-details/output/node-edge-point/mapped-service-end-point */
typedef struct y_tapi_topology_T_get_node_edge_point_details_output_node_edge_point_mapped_service_end_point_ {
    dlq_hdr_t qhdr;
    xmlChar *mapped_service_end_point;
} y_tapi_topology_T_get_node_edge_point_details_output_node_edge_point_mapped_service_end_point;

/* container /get-node-edge-point-details/output/node-edge-point/state */
typedef struct y_tapi_topology_T_get_node_edge_point_details_output_node_edge_point_state_ {
    xmlChar *administrative_state;
    xmlChar *operational_state;
    xmlChar *lifecycle_state;
} y_tapi_topology_T_get_node_edge_point_details_output_node_edge_point_state;

/* list /get-node-edge-point-details/output/node-edge-point/name */
typedef struct y_tapi_topology_T_get_node_edge_point_details_output_node_edge_point_name_ {
    dlq_hdr_t qhdr;
    xmlChar *value_name;
    xmlChar *value;
} y_tapi_topology_T_get_node_edge_point_details_output_node_edge_point_name;

/* list /get-node-edge-point-details/output/node-edge-point/label */
typedef struct y_tapi_topology_T_get_node_edge_point_details_output_node_edge_point_label_ {
    dlq_hdr_t qhdr;
    xmlChar *value_name;
    xmlChar *value;
} y_tapi_topology_T_get_node_edge_point_details_output_node_edge_point_label;

/* container /get-node-edge-point-details/output/node-edge-point/extensions */
typedef struct y_tapi_topology_T_get_node_edge_point_details_output_node_edge_point_extensions_ {
} y_tapi_topology_T_get_node_edge_point_details_output_node_edge_point_extensions;

/* container /get-node-edge-point-details/output/node-edge-point */
typedef struct y_tapi_topology_T_get_node_edge_point_details_output_node_edge_point_ {
    dlq_hdr_t layer_protocol;
    dlq_hdr_t client_node_edge_point;
    dlq_hdr_t mapped_service_end_point;
    y_tapi_topology_T_get_node_edge_point_details_output_node_edge_point_state state;
    xmlChar *termination_direction;
    xmlChar *link_port_direction;
    xmlChar *link_port_role;
    xmlChar *uuid;
    dlq_hdr_t name;
    dlq_hdr_t label;
    y_tapi_topology_T_get_node_edge_point_details_output_node_edge_point_extensions extensions;
} y_tapi_topology_T_get_node_edge_point_details_output_node_edge_point;

/* container /get-node-edge-point-details/output */
typedef struct y_tapi_topology_T_get_node_edge_point_details_output_ {
    y_tapi_topology_T_get_node_edge_point_details_output_node_edge_point node_edge_point;
} y_tapi_topology_T_get_node_edge_point_details_output;

/* rpc /get-node-edge-point-details */
typedef struct y_tapi_topology_T_get_node_edge_point_details_ {
    y_tapi_topology_T_get_node_edge_point_details_input input;
    y_tapi_topology_T_get_node_edge_point_details_output output;
} y_tapi_topology_T_get_node_edge_point_details;

/* container /get-link-details/input */
typedef struct y_tapi_topology_T_get_link_details_input_ {
    xmlChar *topology_id_or_name;
    xmlChar *link_id_or_name;
} y_tapi_topology_T_get_link_details_input;

/* leaf-list /get-link-details/output/link/node-edge-point */
typedef struct y_tapi_topology_T_get_link_details_output_link_node_edge_point_ {
    dlq_hdr_t qhdr;
    xmlChar *node_edge_point;
} y_tapi_topology_T_get_link_details_output_link_node_edge_point;

/* leaf-list /get-link-details/output/link/node */
typedef struct y_tapi_topology_T_get_link_details_output_link_node_ {
    dlq_hdr_t qhdr;
    xmlChar *node;
} y_tapi_topology_T_get_link_details_output_link_node;

/* container /get-link-details/output/link/state */
typedef struct y_tapi_topology_T_get_link_details_output_link_state_ {
    xmlChar *administrative_state;
    xmlChar *operational_state;
    xmlChar *lifecycle_state;
} y_tapi_topology_T_get_link_details_output_link_state;

/* container /get-link-details/output/link/transfer-capacity/total-potential-capacity */
typedef struct y_tapi_topology_T_get_link_details_output_link_transfer_capacity_total_potential_capacity_ {
    xmlChar *total_size;
    xmlChar *packet_bw_profile_type;
    uint64 committed_information_rate;
    uint64 committed_burst_size;
    uint64 peak_information_rate;
    uint64 peak_burst_size;
    boolean color_aware;
    boolean coupling_flag;
} y_tapi_topology_T_get_link_details_output_link_transfer_capacity_total_potential_capacity;

/* container /get-link-details/output/link/transfer-capacity/available-capacity */
typedef struct y_tapi_topology_T_get_link_details_output_link_transfer_capacity_available_capacity_ {
    xmlChar *total_size;
    xmlChar *packet_bw_profile_type;
    uint64 committed_information_rate;
    uint64 committed_burst_size;
    uint64 peak_information_rate;
    uint64 peak_burst_size;
    boolean color_aware;
    boolean coupling_flag;
} y_tapi_topology_T_get_link_details_output_link_transfer_capacity_available_capacity;

/* list /get-link-details/output/link/transfer-capacity/capacity-assigned-to-user-view */
typedef struct y_tapi_topology_T_get_link_details_output_link_transfer_capacity_capacity_assigned_to_user_view_ {
    dlq_hdr_t qhdr;
    xmlChar *total_size;
    xmlChar *packet_bw_profile_type;
    uint64 committed_information_rate;
    uint64 committed_burst_size;
    uint64 peak_information_rate;
    uint64 peak_burst_size;
    boolean color_aware;
    boolean coupling_flag;
} y_tapi_topology_T_get_link_details_output_link_transfer_capacity_capacity_assigned_to_user_view;

/* container /get-link-details/output/link/transfer-capacity */
typedef struct y_tapi_topology_T_get_link_details_output_link_transfer_capacity_ {
    y_tapi_topology_T_get_link_details_output_link_transfer_capacity_total_potential_capacity total_potential_capacity;
    y_tapi_topology_T_get_link_details_output_link_transfer_capacity_available_capacity available_capacity;
    dlq_hdr_t capacity_assigned_to_user_view;
    xmlChar *capacity_interaction_algorithm;
} y_tapi_topology_T_get_link_details_output_link_transfer_capacity;

/* list /get-link-details/output/link/transfer-cost/cost-characteristic */
typedef struct y_tapi_topology_T_get_link_details_output_link_transfer_cost_cost_characteristic_ {
    dlq_hdr_t qhdr;
    xmlChar *cost_name;
    xmlChar *cost_value;
    xmlChar *cost_algorithm;
} y_tapi_topology_T_get_link_details_output_link_transfer_cost_cost_characteristic;

/* container /get-link-details/output/link/transfer-cost */
typedef struct y_tapi_topology_T_get_link_details_output_link_transfer_cost_ {
    dlq_hdr_t cost_characteristic;
} y_tapi_topology_T_get_link_details_output_link_transfer_cost;

/* container /get-link-details/output/link/transfer-integrity */
typedef struct y_tapi_topology_T_get_link_details_output_link_transfer_integrity_ {
    xmlChar *error_characteristic;
    xmlChar *loss_characteristic;
    xmlChar *repeat_delivery_characteristic;
    xmlChar *delivery_order_characteristic;
    xmlChar *unavailable_time_characteristic;
    xmlChar *server_integrity_process_characteristic;
} y_tapi_topology_T_get_link_details_output_link_transfer_integrity;

/* list /get-link-details/output/link/transfer-timing/latency-characteristic */
typedef struct y_tapi_topology_T_get_link_details_output_link_transfer_timing_latency_characteristic_ {
    dlq_hdr_t qhdr;
    xmlChar *fixed_latency_characteristic;
    xmlChar *jitter_characteristic;
    xmlChar *wander_characteristic;
    xmlChar *traffic_property_name;
    xmlChar *traffic_property_queing_latency;
} y_tapi_topology_T_get_link_details_output_link_transfer_timing_latency_characteristic;

/* container /get-link-details/output/link/transfer-timing */
typedef struct y_tapi_topology_T_get_link_details_output_link_transfer_timing_ {
    dlq_hdr_t latency_characteristic;
} y_tapi_topology_T_get_link_details_output_link_transfer_timing;

/* leaf-list /get-link-details/output/link/risk-parameter/risk-characteristic/risk-identifier-list */
typedef struct y_tapi_topology_T_get_link_details_output_link_risk_parameter_risk_characteristic_risk_identifier_list_ {
    dlq_hdr_t qhdr;
    xmlChar *risk_identifier_list;
} y_tapi_topology_T_get_link_details_output_link_risk_parameter_risk_characteristic_risk_identifier_list;

/* list /get-link-details/output/link/risk-parameter/risk-characteristic */
typedef struct y_tapi_topology_T_get_link_details_output_link_risk_parameter_risk_characteristic_ {
    dlq_hdr_t qhdr;
    xmlChar *risk_characteristic_name;
    dlq_hdr_t risk_identifier_list;
} y_tapi_topology_T_get_link_details_output_link_risk_parameter_risk_characteristic;

/* container /get-link-details/output/link/risk-parameter */
typedef struct y_tapi_topology_T_get_link_details_output_link_risk_parameter_ {
    dlq_hdr_t risk_characteristic;
} y_tapi_topology_T_get_link_details_output_link_risk_parameter;

/* list /get-link-details/output/link/validation/validation-mechanism */
typedef struct y_tapi_topology_T_get_link_details_output_link_validation_validation_mechanism_ {
    dlq_hdr_t qhdr;
    xmlChar *validation_mechanism;
    xmlChar *layer_protocol_adjacency_validated;
    xmlChar *validation_robustness;
} y_tapi_topology_T_get_link_details_output_link_validation_validation_mechanism;

/* container /get-link-details/output/link/validation */
typedef struct y_tapi_topology_T_get_link_details_output_link_validation_ {
    dlq_hdr_t validation_mechanism;
} y_tapi_topology_T_get_link_details_output_link_validation;

/* leaf-list /get-link-details/output/link/lp-transition/transitioned-layer-protocol-name */
typedef struct y_tapi_topology_T_get_link_details_output_link_lp_transition_transitioned_layer_protocol_name_ {
    dlq_hdr_t qhdr;
    xmlChar *transitioned_layer_protocol_name;
} y_tapi_topology_T_get_link_details_output_link_lp_transition_transitioned_layer_protocol_name;

/* leaf-list /get-link-details/output/link/lp-transition/node-edge-point */
typedef struct y_tapi_topology_T_get_link_details_output_link_lp_transition_node_edge_point_ {
    dlq_hdr_t qhdr;
    xmlChar *node_edge_point;
} y_tapi_topology_T_get_link_details_output_link_lp_transition_node_edge_point;

/* container /get-link-details/output/link/lp-transition */
typedef struct y_tapi_topology_T_get_link_details_output_link_lp_transition_ {
    dlq_hdr_t transitioned_layer_protocol_name;
    dlq_hdr_t node_edge_point;
} y_tapi_topology_T_get_link_details_output_link_lp_transition;

/* leaf-list /get-link-details/output/link/layer-protocol-name */
typedef struct y_tapi_topology_T_get_link_details_output_link_layer_protocol_name_ {
    dlq_hdr_t qhdr;
    xmlChar *layer_protocol_name;
} y_tapi_topology_T_get_link_details_output_link_layer_protocol_name;

/* list /get-link-details/output/link/name */
typedef struct y_tapi_topology_T_get_link_details_output_link_name_ {
    dlq_hdr_t qhdr;
    xmlChar *value_name;
    xmlChar *value;
} y_tapi_topology_T_get_link_details_output_link_name;

/* list /get-link-details/output/link/label */
typedef struct y_tapi_topology_T_get_link_details_output_link_label_ {
    dlq_hdr_t qhdr;
    xmlChar *value_name;
    xmlChar *value;
} y_tapi_topology_T_get_link_details_output_link_label;

/* container /get-link-details/output/link/extensions */
typedef struct y_tapi_topology_T_get_link_details_output_link_extensions_ {
} y_tapi_topology_T_get_link_details_output_link_extensions;

/* container /get-link-details/output/link */
typedef struct y_tapi_topology_T_get_link_details_output_link_ {
    dlq_hdr_t node_edge_point;
    dlq_hdr_t node;
    y_tapi_topology_T_get_link_details_output_link_state state;
    y_tapi_topology_T_get_link_details_output_link_transfer_capacity transfer_capacity;
    y_tapi_topology_T_get_link_details_output_link_transfer_cost transfer_cost;
    y_tapi_topology_T_get_link_details_output_link_transfer_integrity transfer_integrity;
    y_tapi_topology_T_get_link_details_output_link_transfer_timing transfer_timing;
    y_tapi_topology_T_get_link_details_output_link_risk_parameter risk_parameter;
    y_tapi_topology_T_get_link_details_output_link_validation validation;
    y_tapi_topology_T_get_link_details_output_link_lp_transition lp_transition;
    dlq_hdr_t layer_protocol_name;
    xmlChar *direction;
    xmlChar *uuid;
    dlq_hdr_t name;
    dlq_hdr_t label;
    y_tapi_topology_T_get_link_details_output_link_extensions extensions;
} y_tapi_topology_T_get_link_details_output_link;

/* container /get-link-details/output */
typedef struct y_tapi_topology_T_get_link_details_output_ {
    y_tapi_topology_T_get_link_details_output_link link;
} y_tapi_topology_T_get_link_details_output;

/* rpc /get-link-details */
typedef struct y_tapi_topology_T_get_link_details_ {
    y_tapi_topology_T_get_link_details_input input;
    y_tapi_topology_T_get_link_details_output output;
} y_tapi_topology_T_get_link_details;

/* list /get-topology-list/output/topology/node/owned-node-edge-point/layer-protocol/name */
typedef struct y_tapi_topology_T_get_topology_list_output_topology_node_owned_node_edge_point_layer_protocol_name_ {
    dlq_hdr_t qhdr;
    xmlChar *value_name;
    xmlChar *value;
} y_tapi_topology_T_get_topology_list_output_topology_node_owned_node_edge_point_layer_protocol_name;

/* container /get-topology-list/output/topology/node/owned-node-edge-point/layer-protocol/extensions */
typedef struct y_tapi_topology_T_get_topology_list_output_topology_node_owned_node_edge_point_layer_protocol_extensions_ {
} y_tapi_topology_T_get_topology_list_output_topology_node_owned_node_edge_point_layer_protocol_extensions;

/* list /get-topology-list/output/topology/node/owned-node-edge-point/layer-protocol */
typedef struct y_tapi_topology_T_get_topology_list_output_topology_node_owned_node_edge_point_layer_protocol_ {
    dlq_hdr_t qhdr;
    xmlChar *layer_protocol_name;
    xmlChar *termination_direction;
    xmlChar *termination_state;
    xmlChar *local_id;
    dlq_hdr_t name;
    y_tapi_topology_T_get_topology_list_output_topology_node_owned_node_edge_point_layer_protocol_extensions extensions;
} y_tapi_topology_T_get_topology_list_output_topology_node_owned_node_edge_point_layer_protocol;

/* leaf-list /get-topology-list/output/topology/node/owned-node-edge-point/client-node-edge-point */
typedef struct y_tapi_topology_T_get_topology_list_output_topology_node_owned_node_edge_point_client_node_edge_point_ {
    dlq_hdr_t qhdr;
    xmlChar *client_node_edge_point;
} y_tapi_topology_T_get_topology_list_output_topology_node_owned_node_edge_point_client_node_edge_point;

/* leaf-list /get-topology-list/output/topology/node/owned-node-edge-point/mapped-service-end-point */
typedef struct y_tapi_topology_T_get_topology_list_output_topology_node_owned_node_edge_point_mapped_service_end_point_ {
    dlq_hdr_t qhdr;
    xmlChar *mapped_service_end_point;
} y_tapi_topology_T_get_topology_list_output_topology_node_owned_node_edge_point_mapped_service_end_point;

/* container /get-topology-list/output/topology/node/owned-node-edge-point/state */
typedef struct y_tapi_topology_T_get_topology_list_output_topology_node_owned_node_edge_point_state_ {
    xmlChar *administrative_state;
    xmlChar *operational_state;
    xmlChar *lifecycle_state;
} y_tapi_topology_T_get_topology_list_output_topology_node_owned_node_edge_point_state;

/* list /get-topology-list/output/topology/node/owned-node-edge-point/name */
typedef struct y_tapi_topology_T_get_topology_list_output_topology_node_owned_node_edge_point_name_ {
    dlq_hdr_t qhdr;
    xmlChar *value_name;
    xmlChar *value;
} y_tapi_topology_T_get_topology_list_output_topology_node_owned_node_edge_point_name;

/* list /get-topology-list/output/topology/node/owned-node-edge-point/label */
typedef struct y_tapi_topology_T_get_topology_list_output_topology_node_owned_node_edge_point_label_ {
    dlq_hdr_t qhdr;
    xmlChar *value_name;
    xmlChar *value;
} y_tapi_topology_T_get_topology_list_output_topology_node_owned_node_edge_point_label;

/* container /get-topology-list/output/topology/node/owned-node-edge-point/extensions */
typedef struct y_tapi_topology_T_get_topology_list_output_topology_node_owned_node_edge_point_extensions_ {
} y_tapi_topology_T_get_topology_list_output_topology_node_owned_node_edge_point_extensions;

/* list /get-topology-list/output/topology/node/owned-node-edge-point */
typedef struct y_tapi_topology_T_get_topology_list_output_topology_node_owned_node_edge_point_ {
    dlq_hdr_t qhdr;
    dlq_hdr_t layer_protocol;
    dlq_hdr_t client_node_edge_point;
    dlq_hdr_t mapped_service_end_point;
    y_tapi_topology_T_get_topology_list_output_topology_node_owned_node_edge_point_state state;
    xmlChar *termination_direction;
    xmlChar *link_port_direction;
    xmlChar *link_port_role;
    xmlChar *uuid;
    dlq_hdr_t name;
    dlq_hdr_t label;
    y_tapi_topology_T_get_topology_list_output_topology_node_owned_node_edge_point_extensions extensions;
} y_tapi_topology_T_get_topology_list_output_topology_node_owned_node_edge_point;

/* leaf-list /get-topology-list/output/topology/node/aggregated-node-edge-point */
typedef struct y_tapi_topology_T_get_topology_list_output_topology_node_aggregated_node_edge_point_ {
    dlq_hdr_t qhdr;
    xmlChar *aggregated_node_edge_point;
} y_tapi_topology_T_get_topology_list_output_topology_node_aggregated_node_edge_point;

/* container /get-topology-list/output/topology/node/state */
typedef struct y_tapi_topology_T_get_topology_list_output_topology_node_state_ {
    xmlChar *administrative_state;
    xmlChar *operational_state;
    xmlChar *lifecycle_state;
} y_tapi_topology_T_get_topology_list_output_topology_node_state;

/* container /get-topology-list/output/topology/node/transfer-capacity/total-potential-capacity */
typedef struct y_tapi_topology_T_get_topology_list_output_topology_node_transfer_capacity_total_potential_capacity_ {
    xmlChar *total_size;
    xmlChar *packet_bw_profile_type;
    uint64 committed_information_rate;
    uint64 committed_burst_size;
    uint64 peak_information_rate;
    uint64 peak_burst_size;
    boolean color_aware;
    boolean coupling_flag;
} y_tapi_topology_T_get_topology_list_output_topology_node_transfer_capacity_total_potential_capacity;

/* container /get-topology-list/output/topology/node/transfer-capacity/available-capacity */
typedef struct y_tapi_topology_T_get_topology_list_output_topology_node_transfer_capacity_available_capacity_ {
    xmlChar *total_size;
    xmlChar *packet_bw_profile_type;
    uint64 committed_information_rate;
    uint64 committed_burst_size;
    uint64 peak_information_rate;
    uint64 peak_burst_size;
    boolean color_aware;
    boolean coupling_flag;
} y_tapi_topology_T_get_topology_list_output_topology_node_transfer_capacity_available_capacity;

/* list /get-topology-list/output/topology/node/transfer-capacity/capacity-assigned-to-user-view */
typedef struct y_tapi_topology_T_get_topology_list_output_topology_node_transfer_capacity_capacity_assigned_to_user_view_ {
    dlq_hdr_t qhdr;
    xmlChar *total_size;
    xmlChar *packet_bw_profile_type;
    uint64 committed_information_rate;
    uint64 committed_burst_size;
    uint64 peak_information_rate;
    uint64 peak_burst_size;
    boolean color_aware;
    boolean coupling_flag;
} y_tapi_topology_T_get_topology_list_output_topology_node_transfer_capacity_capacity_assigned_to_user_view;

/* container /get-topology-list/output/topology/node/transfer-capacity */
typedef struct y_tapi_topology_T_get_topology_list_output_topology_node_transfer_capacity_ {
    y_tapi_topology_T_get_topology_list_output_topology_node_transfer_capacity_total_potential_capacity total_potential_capacity;
    y_tapi_topology_T_get_topology_list_output_topology_node_transfer_capacity_available_capacity available_capacity;
    dlq_hdr_t capacity_assigned_to_user_view;
    xmlChar *capacity_interaction_algorithm;
} y_tapi_topology_T_get_topology_list_output_topology_node_transfer_capacity;

/* list /get-topology-list/output/topology/node/transfer-cost/cost-characteristic */
typedef struct y_tapi_topology_T_get_topology_list_output_topology_node_transfer_cost_cost_characteristic_ {
    dlq_hdr_t qhdr;
    xmlChar *cost_name;
    xmlChar *cost_value;
    xmlChar *cost_algorithm;
} y_tapi_topology_T_get_topology_list_output_topology_node_transfer_cost_cost_characteristic;

/* container /get-topology-list/output/topology/node/transfer-cost */
typedef struct y_tapi_topology_T_get_topology_list_output_topology_node_transfer_cost_ {
    dlq_hdr_t cost_characteristic;
} y_tapi_topology_T_get_topology_list_output_topology_node_transfer_cost;

/* container /get-topology-list/output/topology/node/transfer-integrity */
typedef struct y_tapi_topology_T_get_topology_list_output_topology_node_transfer_integrity_ {
    xmlChar *error_characteristic;
    xmlChar *loss_characteristic;
    xmlChar *repeat_delivery_characteristic;
    xmlChar *delivery_order_characteristic;
    xmlChar *unavailable_time_characteristic;
    xmlChar *server_integrity_process_characteristic;
} y_tapi_topology_T_get_topology_list_output_topology_node_transfer_integrity;

/* list /get-topology-list/output/topology/node/transfer-timing/latency-characteristic */
typedef struct y_tapi_topology_T_get_topology_list_output_topology_node_transfer_timing_latency_characteristic_ {
    dlq_hdr_t qhdr;
    xmlChar *fixed_latency_characteristic;
    xmlChar *jitter_characteristic;
    xmlChar *wander_characteristic;
    xmlChar *traffic_property_name;
    xmlChar *traffic_property_queing_latency;
} y_tapi_topology_T_get_topology_list_output_topology_node_transfer_timing_latency_characteristic;

/* container /get-topology-list/output/topology/node/transfer-timing */
typedef struct y_tapi_topology_T_get_topology_list_output_topology_node_transfer_timing_ {
    dlq_hdr_t latency_characteristic;
} y_tapi_topology_T_get_topology_list_output_topology_node_transfer_timing;

/* leaf-list /get-topology-list/output/topology/node/layer-protocol-name */
typedef struct y_tapi_topology_T_get_topology_list_output_topology_node_layer_protocol_name_ {
    dlq_hdr_t qhdr;
    xmlChar *layer_protocol_name;
} y_tapi_topology_T_get_topology_list_output_topology_node_layer_protocol_name;

/* list /get-topology-list/output/topology/node/name */
typedef struct y_tapi_topology_T_get_topology_list_output_topology_node_name_ {
    dlq_hdr_t qhdr;
    xmlChar *value_name;
    xmlChar *value;
} y_tapi_topology_T_get_topology_list_output_topology_node_name;

/* list /get-topology-list/output/topology/node/label */
typedef struct y_tapi_topology_T_get_topology_list_output_topology_node_label_ {
    dlq_hdr_t qhdr;
    xmlChar *value_name;
    xmlChar *value;
} y_tapi_topology_T_get_topology_list_output_topology_node_label;

/* container /get-topology-list/output/topology/node/extensions */
typedef struct y_tapi_topology_T_get_topology_list_output_topology_node_extensions_ {
} y_tapi_topology_T_get_topology_list_output_topology_node_extensions;

/* list /get-topology-list/output/topology/node */
typedef struct y_tapi_topology_T_get_topology_list_output_topology_node_ {
    dlq_hdr_t qhdr;
    dlq_hdr_t owned_node_edge_point;
    dlq_hdr_t aggregated_node_edge_point;
    xmlChar *encap_topology;
    y_tapi_topology_T_get_topology_list_output_topology_node_state state;
    y_tapi_topology_T_get_topology_list_output_topology_node_transfer_capacity transfer_capacity;
    y_tapi_topology_T_get_topology_list_output_topology_node_transfer_cost transfer_cost;
    y_tapi_topology_T_get_topology_list_output_topology_node_transfer_integrity transfer_integrity;
    y_tapi_topology_T_get_topology_list_output_topology_node_transfer_timing transfer_timing;
    dlq_hdr_t layer_protocol_name;
    xmlChar *uuid;
    dlq_hdr_t name;
    dlq_hdr_t label;
    y_tapi_topology_T_get_topology_list_output_topology_node_extensions extensions;
} y_tapi_topology_T_get_topology_list_output_topology_node;

/* leaf-list /get-topology-list/output/topology/link/node-edge-point */
typedef struct y_tapi_topology_T_get_topology_list_output_topology_link_node_edge_point_ {
    dlq_hdr_t qhdr;
    xmlChar *node_edge_point;
} y_tapi_topology_T_get_topology_list_output_topology_link_node_edge_point;

/* leaf-list /get-topology-list/output/topology/link/node */
typedef struct y_tapi_topology_T_get_topology_list_output_topology_link_node_ {
    dlq_hdr_t qhdr;
    xmlChar *node;
} y_tapi_topology_T_get_topology_list_output_topology_link_node;

/* container /get-topology-list/output/topology/link/state */
typedef struct y_tapi_topology_T_get_topology_list_output_topology_link_state_ {
    xmlChar *administrative_state;
    xmlChar *operational_state;
    xmlChar *lifecycle_state;
} y_tapi_topology_T_get_topology_list_output_topology_link_state;

/* container /get-topology-list/output/topology/link/transfer-capacity/total-potential-capacity */
typedef struct y_tapi_topology_T_get_topology_list_output_topology_link_transfer_capacity_total_potential_capacity_ {
    xmlChar *total_size;
    xmlChar *packet_bw_profile_type;
    uint64 committed_information_rate;
    uint64 committed_burst_size;
    uint64 peak_information_rate;
    uint64 peak_burst_size;
    boolean color_aware;
    boolean coupling_flag;
} y_tapi_topology_T_get_topology_list_output_topology_link_transfer_capacity_total_potential_capacity;

/* container /get-topology-list/output/topology/link/transfer-capacity/available-capacity */
typedef struct y_tapi_topology_T_get_topology_list_output_topology_link_transfer_capacity_available_capacity_ {
    xmlChar *total_size;
    xmlChar *packet_bw_profile_type;
    uint64 committed_information_rate;
    uint64 committed_burst_size;
    uint64 peak_information_rate;
    uint64 peak_burst_size;
    boolean color_aware;
    boolean coupling_flag;
} y_tapi_topology_T_get_topology_list_output_topology_link_transfer_capacity_available_capacity;

/* list /get-topology-list/output/topology/link/transfer-capacity/capacity-assigned-to-user-view */
typedef struct y_tapi_topology_T_get_topology_list_output_topology_link_transfer_capacity_capacity_assigned_to_user_view_ {
    dlq_hdr_t qhdr;
    xmlChar *total_size;
    xmlChar *packet_bw_profile_type;
    uint64 committed_information_rate;
    uint64 committed_burst_size;
    uint64 peak_information_rate;
    uint64 peak_burst_size;
    boolean color_aware;
    boolean coupling_flag;
} y_tapi_topology_T_get_topology_list_output_topology_link_transfer_capacity_capacity_assigned_to_user_view;

/* container /get-topology-list/output/topology/link/transfer-capacity */
typedef struct y_tapi_topology_T_get_topology_list_output_topology_link_transfer_capacity_ {
    y_tapi_topology_T_get_topology_list_output_topology_link_transfer_capacity_total_potential_capacity total_potential_capacity;
    y_tapi_topology_T_get_topology_list_output_topology_link_transfer_capacity_available_capacity available_capacity;
    dlq_hdr_t capacity_assigned_to_user_view;
    xmlChar *capacity_interaction_algorithm;
} y_tapi_topology_T_get_topology_list_output_topology_link_transfer_capacity;

/* list /get-topology-list/output/topology/link/transfer-cost/cost-characteristic */
typedef struct y_tapi_topology_T_get_topology_list_output_topology_link_transfer_cost_cost_characteristic_ {
    dlq_hdr_t qhdr;
    xmlChar *cost_name;
    xmlChar *cost_value;
    xmlChar *cost_algorithm;
} y_tapi_topology_T_get_topology_list_output_topology_link_transfer_cost_cost_characteristic;

/* container /get-topology-list/output/topology/link/transfer-cost */
typedef struct y_tapi_topology_T_get_topology_list_output_topology_link_transfer_cost_ {
    dlq_hdr_t cost_characteristic;
} y_tapi_topology_T_get_topology_list_output_topology_link_transfer_cost;

/* container /get-topology-list/output/topology/link/transfer-integrity */
typedef struct y_tapi_topology_T_get_topology_list_output_topology_link_transfer_integrity_ {
    xmlChar *error_characteristic;
    xmlChar *loss_characteristic;
    xmlChar *repeat_delivery_characteristic;
    xmlChar *delivery_order_characteristic;
    xmlChar *unavailable_time_characteristic;
    xmlChar *server_integrity_process_characteristic;
} y_tapi_topology_T_get_topology_list_output_topology_link_transfer_integrity;

/* list /get-topology-list/output/topology/link/transfer-timing/latency-characteristic */
typedef struct y_tapi_topology_T_get_topology_list_output_topology_link_transfer_timing_latency_characteristic_ {
    dlq_hdr_t qhdr;
    xmlChar *fixed_latency_characteristic;
    xmlChar *jitter_characteristic;
    xmlChar *wander_characteristic;
    xmlChar *traffic_property_name;
    xmlChar *traffic_property_queing_latency;
} y_tapi_topology_T_get_topology_list_output_topology_link_transfer_timing_latency_characteristic;

/* container /get-topology-list/output/topology/link/transfer-timing */
typedef struct y_tapi_topology_T_get_topology_list_output_topology_link_transfer_timing_ {
    dlq_hdr_t latency_characteristic;
} y_tapi_topology_T_get_topology_list_output_topology_link_transfer_timing;

/* leaf-list /get-topology-list/output/topology/link/risk-parameter/risk-characteristic/risk-identifier-list */
typedef struct y_tapi_topology_T_get_topology_list_output_topology_link_risk_parameter_risk_characteristic_risk_identifier_list_ {
    dlq_hdr_t qhdr;
    xmlChar *risk_identifier_list;
} y_tapi_topology_T_get_topology_list_output_topology_link_risk_parameter_risk_characteristic_risk_identifier_list;

/* list /get-topology-list/output/topology/link/risk-parameter/risk-characteristic */
typedef struct y_tapi_topology_T_get_topology_list_output_topology_link_risk_parameter_risk_characteristic_ {
    dlq_hdr_t qhdr;
    xmlChar *risk_characteristic_name;
    dlq_hdr_t risk_identifier_list;
} y_tapi_topology_T_get_topology_list_output_topology_link_risk_parameter_risk_characteristic;

/* container /get-topology-list/output/topology/link/risk-parameter */
typedef struct y_tapi_topology_T_get_topology_list_output_topology_link_risk_parameter_ {
    dlq_hdr_t risk_characteristic;
} y_tapi_topology_T_get_topology_list_output_topology_link_risk_parameter;

/* list /get-topology-list/output/topology/link/validation/validation-mechanism */
typedef struct y_tapi_topology_T_get_topology_list_output_topology_link_validation_validation_mechanism_ {
    dlq_hdr_t qhdr;
    xmlChar *validation_mechanism;
    xmlChar *layer_protocol_adjacency_validated;
    xmlChar *validation_robustness;
} y_tapi_topology_T_get_topology_list_output_topology_link_validation_validation_mechanism;

/* container /get-topology-list/output/topology/link/validation */
typedef struct y_tapi_topology_T_get_topology_list_output_topology_link_validation_ {
    dlq_hdr_t validation_mechanism;
} y_tapi_topology_T_get_topology_list_output_topology_link_validation;

/* leaf-list /get-topology-list/output/topology/link/lp-transition/transitioned-layer-protocol-name */
typedef struct y_tapi_topology_T_get_topology_list_output_topology_link_lp_transition_transitioned_layer_protocol_name_ {
    dlq_hdr_t qhdr;
    xmlChar *transitioned_layer_protocol_name;
} y_tapi_topology_T_get_topology_list_output_topology_link_lp_transition_transitioned_layer_protocol_name;

/* leaf-list /get-topology-list/output/topology/link/lp-transition/node-edge-point */
typedef struct y_tapi_topology_T_get_topology_list_output_topology_link_lp_transition_node_edge_point_ {
    dlq_hdr_t qhdr;
    xmlChar *node_edge_point;
} y_tapi_topology_T_get_topology_list_output_topology_link_lp_transition_node_edge_point;

/* container /get-topology-list/output/topology/link/lp-transition */
typedef struct y_tapi_topology_T_get_topology_list_output_topology_link_lp_transition_ {
    dlq_hdr_t transitioned_layer_protocol_name;
    dlq_hdr_t node_edge_point;
} y_tapi_topology_T_get_topology_list_output_topology_link_lp_transition;

/* leaf-list /get-topology-list/output/topology/link/layer-protocol-name */
typedef struct y_tapi_topology_T_get_topology_list_output_topology_link_layer_protocol_name_ {
    dlq_hdr_t qhdr;
    xmlChar *layer_protocol_name;
} y_tapi_topology_T_get_topology_list_output_topology_link_layer_protocol_name;

/* list /get-topology-list/output/topology/link/name */
typedef struct y_tapi_topology_T_get_topology_list_output_topology_link_name_ {
    dlq_hdr_t qhdr;
    xmlChar *value_name;
    xmlChar *value;
} y_tapi_topology_T_get_topology_list_output_topology_link_name;

/* list /get-topology-list/output/topology/link/label */
typedef struct y_tapi_topology_T_get_topology_list_output_topology_link_label_ {
    dlq_hdr_t qhdr;
    xmlChar *value_name;
    xmlChar *value;
} y_tapi_topology_T_get_topology_list_output_topology_link_label;

/* container /get-topology-list/output/topology/link/extensions */
typedef struct y_tapi_topology_T_get_topology_list_output_topology_link_extensions_ {
} y_tapi_topology_T_get_topology_list_output_topology_link_extensions;

/* list /get-topology-list/output/topology/link */
typedef struct y_tapi_topology_T_get_topology_list_output_topology_link_ {
    dlq_hdr_t qhdr;
    dlq_hdr_t node_edge_point;
    dlq_hdr_t node;
    y_tapi_topology_T_get_topology_list_output_topology_link_state state;
    y_tapi_topology_T_get_topology_list_output_topology_link_transfer_capacity transfer_capacity;
    y_tapi_topology_T_get_topology_list_output_topology_link_transfer_cost transfer_cost;
    y_tapi_topology_T_get_topology_list_output_topology_link_transfer_integrity transfer_integrity;
    y_tapi_topology_T_get_topology_list_output_topology_link_transfer_timing transfer_timing;
    y_tapi_topology_T_get_topology_list_output_topology_link_risk_parameter risk_parameter;
    y_tapi_topology_T_get_topology_list_output_topology_link_validation validation;
    y_tapi_topology_T_get_topology_list_output_topology_link_lp_transition lp_transition;
    dlq_hdr_t layer_protocol_name;
    xmlChar *direction;
    xmlChar *uuid;
    dlq_hdr_t name;
    dlq_hdr_t label;
    y_tapi_topology_T_get_topology_list_output_topology_link_extensions extensions;
} y_tapi_topology_T_get_topology_list_output_topology_link;

/* leaf-list /get-topology-list/output/topology/layer-protocol-name */
typedef struct y_tapi_topology_T_get_topology_list_output_topology_layer_protocol_name_ {
    dlq_hdr_t qhdr;
    xmlChar *layer_protocol_name;
} y_tapi_topology_T_get_topology_list_output_topology_layer_protocol_name;

/* list /get-topology-list/output/topology */
typedef struct y_tapi_topology_T_get_topology_list_output_topology_ {
    dlq_hdr_t qhdr;
    dlq_hdr_t node;
    dlq_hdr_t link;
    dlq_hdr_t layer_protocol_name;
} y_tapi_topology_T_get_topology_list_output_topology;

/* container /get-topology-list/output */
typedef struct y_tapi_topology_T_get_topology_list_output_ {
    dlq_hdr_t topology;
} y_tapi_topology_T_get_topology_list_output;

/* container /get-topology-list/input */
typedef struct y_tapi_topology_T_get_topology_list_input_ {
} y_tapi_topology_T_get_topology_list_input;

/* rpc /get-topology-list */
typedef struct y_tapi_topology_T_get_topology_list_ {
    y_tapi_topology_T_get_topology_list_output output;
    y_tapi_topology_T_get_topology_list_input input;
} y_tapi_topology_T_get_topology_list;
/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_owned_node_edge_point_layer_protocol_layer_protocol_name_get
* 
* Get database object callback
* Path: /network-topology/node/owned-node-edge-point/layer-protocol/layer-protocol-name
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_owned_node_edge_point_layer_protocol_layer_protocol_name_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid,
    const xmlChar *k_network_topology_node_owned_node_edge_point_uuid,
    const xmlChar *k_network_topology_node_owned_node_edge_point_layer_protocol_local_id);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_owned_node_edge_point_layer_protocol_termination_direction_get
* 
* Get database object callback
* Path: /network-topology/node/owned-node-edge-point/layer-protocol/termination-direction
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_owned_node_edge_point_layer_protocol_termination_direction_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid,
    const xmlChar *k_network_topology_node_owned_node_edge_point_uuid,
    const xmlChar *k_network_topology_node_owned_node_edge_point_layer_protocol_local_id);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_owned_node_edge_point_layer_protocol_termination_state_get
* 
* Get database object callback
* Path: /network-topology/node/owned-node-edge-point/layer-protocol/termination-state
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_owned_node_edge_point_layer_protocol_termination_state_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid,
    const xmlChar *k_network_topology_node_owned_node_edge_point_uuid,
    const xmlChar *k_network_topology_node_owned_node_edge_point_layer_protocol_local_id);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_owned_node_edge_point_layer_protocol_local_id_get
* 
* Get database object callback
* Path: /network-topology/node/owned-node-edge-point/layer-protocol/local-id
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_owned_node_edge_point_layer_protocol_local_id_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid,
    const xmlChar *k_network_topology_node_owned_node_edge_point_uuid,
    const xmlChar *k_network_topology_node_owned_node_edge_point_layer_protocol_local_id);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_owned_node_edge_point_layer_protocol_name_value_name_get
* 
* Get database object callback
* Path: /network-topology/node/owned-node-edge-point/layer-protocol/name/value-name
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_owned_node_edge_point_layer_protocol_name_value_name_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid,
    const xmlChar *k_network_topology_node_owned_node_edge_point_uuid,
    const xmlChar *k_network_topology_node_owned_node_edge_point_layer_protocol_local_id,
    const xmlChar *k_network_topology_node_owned_node_edge_point_layer_protocol_name_value_name);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_owned_node_edge_point_layer_protocol_name_value_get
* 
* Get database object callback
* Path: /network-topology/node/owned-node-edge-point/layer-protocol/name/value
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_owned_node_edge_point_layer_protocol_name_value_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid,
    const xmlChar *k_network_topology_node_owned_node_edge_point_uuid,
    const xmlChar *k_network_topology_node_owned_node_edge_point_layer_protocol_local_id,
    const xmlChar *k_network_topology_node_owned_node_edge_point_layer_protocol_name_value_name);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_owned_node_edge_point_client_node_edge_point_get
* 
* Get database object callback
* Path: /network-topology/node/owned-node-edge-point/client-node-edge-point
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_owned_node_edge_point_client_node_edge_point_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid,
    const xmlChar *k_network_topology_node_owned_node_edge_point_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_owned_node_edge_point_mapped_service_end_point_get
* 
* Get database object callback
* Path: /network-topology/node/owned-node-edge-point/mapped-service-end-point
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_owned_node_edge_point_mapped_service_end_point_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid,
    const xmlChar *k_network_topology_node_owned_node_edge_point_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_owned_node_edge_point_state_administrative_state_get
* 
* Get database object callback
* Path: /network-topology/node/owned-node-edge-point/state/administrative-state
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_owned_node_edge_point_state_administrative_state_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid,
    const xmlChar *k_network_topology_node_owned_node_edge_point_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_owned_node_edge_point_state_operational_state_get
* 
* Get database object callback
* Path: /network-topology/node/owned-node-edge-point/state/operational-state
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_owned_node_edge_point_state_operational_state_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid,
    const xmlChar *k_network_topology_node_owned_node_edge_point_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_owned_node_edge_point_state_lifecycle_state_get
* 
* Get database object callback
* Path: /network-topology/node/owned-node-edge-point/state/lifecycle-state
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_owned_node_edge_point_state_lifecycle_state_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid,
    const xmlChar *k_network_topology_node_owned_node_edge_point_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_owned_node_edge_point_termination_direction_get
* 
* Get database object callback
* Path: /network-topology/node/owned-node-edge-point/termination-direction
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_owned_node_edge_point_termination_direction_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid,
    const xmlChar *k_network_topology_node_owned_node_edge_point_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_owned_node_edge_point_link_port_direction_get
* 
* Get database object callback
* Path: /network-topology/node/owned-node-edge-point/link-port-direction
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_owned_node_edge_point_link_port_direction_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid,
    const xmlChar *k_network_topology_node_owned_node_edge_point_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_owned_node_edge_point_link_port_role_get
* 
* Get database object callback
* Path: /network-topology/node/owned-node-edge-point/link-port-role
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_owned_node_edge_point_link_port_role_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid,
    const xmlChar *k_network_topology_node_owned_node_edge_point_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_owned_node_edge_point_uuid_get
* 
* Get database object callback
* Path: /network-topology/node/owned-node-edge-point/uuid
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_owned_node_edge_point_uuid_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid,
    const xmlChar *k_network_topology_node_owned_node_edge_point_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_owned_node_edge_point_name_value_name_get
* 
* Get database object callback
* Path: /network-topology/node/owned-node-edge-point/name/value-name
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_owned_node_edge_point_name_value_name_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid,
    const xmlChar *k_network_topology_node_owned_node_edge_point_uuid,
    const xmlChar *k_network_topology_node_owned_node_edge_point_name_value_name);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_owned_node_edge_point_name_value_get
* 
* Get database object callback
* Path: /network-topology/node/owned-node-edge-point/name/value
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_owned_node_edge_point_name_value_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid,
    const xmlChar *k_network_topology_node_owned_node_edge_point_uuid,
    const xmlChar *k_network_topology_node_owned_node_edge_point_name_value_name);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_owned_node_edge_point_label_value_name_get
* 
* Get database object callback
* Path: /network-topology/node/owned-node-edge-point/label/value-name
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_owned_node_edge_point_label_value_name_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid,
    const xmlChar *k_network_topology_node_owned_node_edge_point_uuid,
    const xmlChar *k_network_topology_node_owned_node_edge_point_label_value_name);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_owned_node_edge_point_label_value_get
* 
* Get database object callback
* Path: /network-topology/node/owned-node-edge-point/label/value
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_owned_node_edge_point_label_value_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid,
    const xmlChar *k_network_topology_node_owned_node_edge_point_uuid,
    const xmlChar *k_network_topology_node_owned_node_edge_point_label_value_name);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_aggregated_node_edge_point_get
* 
* Get database object callback
* Path: /network-topology/node/aggregated-node-edge-point
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_aggregated_node_edge_point_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_encap_topology_get
* 
* Get database object callback
* Path: /network-topology/node/encap-topology
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_encap_topology_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_state_administrative_state_get
* 
* Get database object callback
* Path: /network-topology/node/state/administrative-state
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_state_administrative_state_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_state_operational_state_get
* 
* Get database object callback
* Path: /network-topology/node/state/operational-state
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_state_operational_state_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_state_lifecycle_state_get
* 
* Get database object callback
* Path: /network-topology/node/state/lifecycle-state
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_state_lifecycle_state_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_transfer_capacity_total_potential_capacity_total_size_get
* 
* Get database object callback
* Path: /network-topology/node/transfer-capacity/total-potential-capacity/total-size
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_transfer_capacity_total_potential_capacity_total_size_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_transfer_capacity_total_potential_capacity_packet_bw_profile_type_get
* 
* Get database object callback
* Path: /network-topology/node/transfer-capacity/total-potential-capacity/packet-bw-profile-type
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_transfer_capacity_total_potential_capacity_packet_bw_profile_type_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_transfer_capacity_total_potential_capacity_committed_information_rate_get
* 
* Get database object callback
* Path: /network-topology/node/transfer-capacity/total-potential-capacity/committed-information-rate
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_transfer_capacity_total_potential_capacity_committed_information_rate_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_transfer_capacity_total_potential_capacity_committed_burst_size_get
* 
* Get database object callback
* Path: /network-topology/node/transfer-capacity/total-potential-capacity/committed-burst-size
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_transfer_capacity_total_potential_capacity_committed_burst_size_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_transfer_capacity_total_potential_capacity_peak_information_rate_get
* 
* Get database object callback
* Path: /network-topology/node/transfer-capacity/total-potential-capacity/peak-information-rate
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_transfer_capacity_total_potential_capacity_peak_information_rate_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_transfer_capacity_total_potential_capacity_peak_burst_size_get
* 
* Get database object callback
* Path: /network-topology/node/transfer-capacity/total-potential-capacity/peak-burst-size
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_transfer_capacity_total_potential_capacity_peak_burst_size_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_transfer_capacity_total_potential_capacity_color_aware_get
* 
* Get database object callback
* Path: /network-topology/node/transfer-capacity/total-potential-capacity/color-aware
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_transfer_capacity_total_potential_capacity_color_aware_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_transfer_capacity_total_potential_capacity_coupling_flag_get
* 
* Get database object callback
* Path: /network-topology/node/transfer-capacity/total-potential-capacity/coupling-flag
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_transfer_capacity_total_potential_capacity_coupling_flag_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_transfer_capacity_available_capacity_total_size_get
* 
* Get database object callback
* Path: /network-topology/node/transfer-capacity/available-capacity/total-size
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_transfer_capacity_available_capacity_total_size_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_transfer_capacity_available_capacity_packet_bw_profile_type_get
* 
* Get database object callback
* Path: /network-topology/node/transfer-capacity/available-capacity/packet-bw-profile-type
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_transfer_capacity_available_capacity_packet_bw_profile_type_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_transfer_capacity_available_capacity_committed_information_rate_get
* 
* Get database object callback
* Path: /network-topology/node/transfer-capacity/available-capacity/committed-information-rate
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_transfer_capacity_available_capacity_committed_information_rate_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_transfer_capacity_available_capacity_committed_burst_size_get
* 
* Get database object callback
* Path: /network-topology/node/transfer-capacity/available-capacity/committed-burst-size
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_transfer_capacity_available_capacity_committed_burst_size_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_transfer_capacity_available_capacity_peak_information_rate_get
* 
* Get database object callback
* Path: /network-topology/node/transfer-capacity/available-capacity/peak-information-rate
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_transfer_capacity_available_capacity_peak_information_rate_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_transfer_capacity_available_capacity_peak_burst_size_get
* 
* Get database object callback
* Path: /network-topology/node/transfer-capacity/available-capacity/peak-burst-size
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_transfer_capacity_available_capacity_peak_burst_size_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_transfer_capacity_available_capacity_color_aware_get
* 
* Get database object callback
* Path: /network-topology/node/transfer-capacity/available-capacity/color-aware
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_transfer_capacity_available_capacity_color_aware_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_transfer_capacity_available_capacity_coupling_flag_get
* 
* Get database object callback
* Path: /network-topology/node/transfer-capacity/available-capacity/coupling-flag
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_transfer_capacity_available_capacity_coupling_flag_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_transfer_capacity_capacity_assigned_to_user_view_total_size_get
* 
* Get database object callback
* Path: /network-topology/node/transfer-capacity/capacity-assigned-to-user-view/total-size
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_transfer_capacity_capacity_assigned_to_user_view_total_size_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid,
    xmlChar *k_network_topology_node_transfer_capacity_capacity_assigned_to_user_view_total_size);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_transfer_capacity_capacity_assigned_to_user_view_packet_bw_profile_type_get
* 
* Get database object callback
* Path: /network-topology/node/transfer-capacity/capacity-assigned-to-user-view/packet-bw-profile-type
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_transfer_capacity_capacity_assigned_to_user_view_packet_bw_profile_type_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid,
    xmlChar *k_network_topology_node_transfer_capacity_capacity_assigned_to_user_view_total_size);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_transfer_capacity_capacity_assigned_to_user_view_committed_information_rate_get
* 
* Get database object callback
* Path: /network-topology/node/transfer-capacity/capacity-assigned-to-user-view/committed-information-rate
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_transfer_capacity_capacity_assigned_to_user_view_committed_information_rate_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid,
    xmlChar *k_network_topology_node_transfer_capacity_capacity_assigned_to_user_view_total_size);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_transfer_capacity_capacity_assigned_to_user_view_committed_burst_size_get
* 
* Get database object callback
* Path: /network-topology/node/transfer-capacity/capacity-assigned-to-user-view/committed-burst-size
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_transfer_capacity_capacity_assigned_to_user_view_committed_burst_size_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid,
    xmlChar *k_network_topology_node_transfer_capacity_capacity_assigned_to_user_view_total_size);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_transfer_capacity_capacity_assigned_to_user_view_peak_information_rate_get
* 
* Get database object callback
* Path: /network-topology/node/transfer-capacity/capacity-assigned-to-user-view/peak-information-rate
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_transfer_capacity_capacity_assigned_to_user_view_peak_information_rate_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid,
    xmlChar *k_network_topology_node_transfer_capacity_capacity_assigned_to_user_view_total_size);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_transfer_capacity_capacity_assigned_to_user_view_peak_burst_size_get
* 
* Get database object callback
* Path: /network-topology/node/transfer-capacity/capacity-assigned-to-user-view/peak-burst-size
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_transfer_capacity_capacity_assigned_to_user_view_peak_burst_size_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid,
    xmlChar *k_network_topology_node_transfer_capacity_capacity_assigned_to_user_view_total_size);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_transfer_capacity_capacity_assigned_to_user_view_color_aware_get
* 
* Get database object callback
* Path: /network-topology/node/transfer-capacity/capacity-assigned-to-user-view/color-aware
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_transfer_capacity_capacity_assigned_to_user_view_color_aware_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid,
    xmlChar *k_network_topology_node_transfer_capacity_capacity_assigned_to_user_view_total_size);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_transfer_capacity_capacity_assigned_to_user_view_coupling_flag_get
* 
* Get database object callback
* Path: /network-topology/node/transfer-capacity/capacity-assigned-to-user-view/coupling-flag
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_transfer_capacity_capacity_assigned_to_user_view_coupling_flag_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid,
    xmlChar *k_network_topology_node_transfer_capacity_capacity_assigned_to_user_view_total_size);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_transfer_capacity_capacity_interaction_algorithm_get
* 
* Get database object callback
* Path: /network-topology/node/transfer-capacity/capacity-interaction-algorithm
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_transfer_capacity_capacity_interaction_algorithm_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_transfer_cost_cost_characteristic_cost_name_get
* 
* Get database object callback
* Path: /network-topology/node/transfer-cost/cost-characteristic/cost-name
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_transfer_cost_cost_characteristic_cost_name_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid,
    const xmlChar *k_network_topology_node_transfer_cost_cost_characteristic_cost_name,
    const xmlChar *k_network_topology_node_transfer_cost_cost_characteristic_cost_value,
    const xmlChar *k_network_topology_node_transfer_cost_cost_characteristic_cost_algorithm);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_transfer_cost_cost_characteristic_cost_value_get
* 
* Get database object callback
* Path: /network-topology/node/transfer-cost/cost-characteristic/cost-value
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_transfer_cost_cost_characteristic_cost_value_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid,
    const xmlChar *k_network_topology_node_transfer_cost_cost_characteristic_cost_name,
    const xmlChar *k_network_topology_node_transfer_cost_cost_characteristic_cost_value,
    const xmlChar *k_network_topology_node_transfer_cost_cost_characteristic_cost_algorithm);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_transfer_cost_cost_characteristic_cost_algorithm_get
* 
* Get database object callback
* Path: /network-topology/node/transfer-cost/cost-characteristic/cost-algorithm
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_transfer_cost_cost_characteristic_cost_algorithm_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid,
    const xmlChar *k_network_topology_node_transfer_cost_cost_characteristic_cost_name,
    const xmlChar *k_network_topology_node_transfer_cost_cost_characteristic_cost_value,
    const xmlChar *k_network_topology_node_transfer_cost_cost_characteristic_cost_algorithm);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_transfer_integrity_error_characteristic_get
* 
* Get database object callback
* Path: /network-topology/node/transfer-integrity/error-characteristic
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_transfer_integrity_error_characteristic_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_transfer_integrity_loss_characteristic_get
* 
* Get database object callback
* Path: /network-topology/node/transfer-integrity/loss-characteristic
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_transfer_integrity_loss_characteristic_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_transfer_integrity_repeat_delivery_characteristic_get
* 
* Get database object callback
* Path: /network-topology/node/transfer-integrity/repeat-delivery-characteristic
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_transfer_integrity_repeat_delivery_characteristic_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_transfer_integrity_delivery_order_characteristic_get
* 
* Get database object callback
* Path: /network-topology/node/transfer-integrity/delivery-order-characteristic
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_transfer_integrity_delivery_order_characteristic_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_transfer_integrity_unavailable_time_characteristic_get
* 
* Get database object callback
* Path: /network-topology/node/transfer-integrity/unavailable-time-characteristic
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_transfer_integrity_unavailable_time_characteristic_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_transfer_integrity_server_integrity_process_characteristic_get
* 
* Get database object callback
* Path: /network-topology/node/transfer-integrity/server-integrity-process-characteristic
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_transfer_integrity_server_integrity_process_characteristic_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_transfer_timing_latency_characteristic_fixed_latency_characteristic_get
* 
* Get database object callback
* Path: /network-topology/node/transfer-timing/latency-characteristic/fixed-latency-characteristic
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_transfer_timing_latency_characteristic_fixed_latency_characteristic_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid,
    const xmlChar *k_network_topology_node_transfer_timing_latency_characteristic_traffic_property_name,
    const xmlChar *k_network_topology_node_transfer_timing_latency_characteristic_traffic_property_queing_latency);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_transfer_timing_latency_characteristic_jitter_characteristic_get
* 
* Get database object callback
* Path: /network-topology/node/transfer-timing/latency-characteristic/jitter-characteristic
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_transfer_timing_latency_characteristic_jitter_characteristic_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid,
    const xmlChar *k_network_topology_node_transfer_timing_latency_characteristic_traffic_property_name,
    const xmlChar *k_network_topology_node_transfer_timing_latency_characteristic_traffic_property_queing_latency);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_transfer_timing_latency_characteristic_wander_characteristic_get
* 
* Get database object callback
* Path: /network-topology/node/transfer-timing/latency-characteristic/wander-characteristic
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_transfer_timing_latency_characteristic_wander_characteristic_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid,
    const xmlChar *k_network_topology_node_transfer_timing_latency_characteristic_traffic_property_name,
    const xmlChar *k_network_topology_node_transfer_timing_latency_characteristic_traffic_property_queing_latency);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_transfer_timing_latency_characteristic_traffic_property_name_get
* 
* Get database object callback
* Path: /network-topology/node/transfer-timing/latency-characteristic/traffic-property-name
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_transfer_timing_latency_characteristic_traffic_property_name_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid,
    const xmlChar *k_network_topology_node_transfer_timing_latency_characteristic_traffic_property_name,
    const xmlChar *k_network_topology_node_transfer_timing_latency_characteristic_traffic_property_queing_latency);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_transfer_timing_latency_characteristic_traffic_property_queing_latency_get
* 
* Get database object callback
* Path: /network-topology/node/transfer-timing/latency-characteristic/traffic-property-queing-latency
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_transfer_timing_latency_characteristic_traffic_property_queing_latency_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid,
    const xmlChar *k_network_topology_node_transfer_timing_latency_characteristic_traffic_property_name,
    const xmlChar *k_network_topology_node_transfer_timing_latency_characteristic_traffic_property_queing_latency);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_layer_protocol_name_get
* 
* Get database object callback
* Path: /network-topology/node/layer-protocol-name
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_layer_protocol_name_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_uuid_get
* 
* Get database object callback
* Path: /network-topology/node/uuid
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_uuid_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_name_value_name_get
* 
* Get database object callback
* Path: /network-topology/node/name/value-name
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_name_value_name_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid,
    const xmlChar *k_network_topology_node_name_value_name);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_name_value_get
* 
* Get database object callback
* Path: /network-topology/node/name/value
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_name_value_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid,
    const xmlChar *k_network_topology_node_name_value_name);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_label_value_name_get
* 
* Get database object callback
* Path: /network-topology/node/label/value-name
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_label_value_name_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid,
    const xmlChar *k_network_topology_node_label_value_name);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_node_label_value_get
* 
* Get database object callback
* Path: /network-topology/node/label/value
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_node_label_value_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_node_uuid,
    const xmlChar *k_network_topology_node_label_value_name);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_node_edge_point_get
* 
* Get database object callback
* Path: /network-topology/link/node-edge-point
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_node_edge_point_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_node_get
* 
* Get database object callback
* Path: /network-topology/link/node
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_node_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_state_administrative_state_get
* 
* Get database object callback
* Path: /network-topology/link/state/administrative-state
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_state_administrative_state_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_state_operational_state_get
* 
* Get database object callback
* Path: /network-topology/link/state/operational-state
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_state_operational_state_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_state_lifecycle_state_get
* 
* Get database object callback
* Path: /network-topology/link/state/lifecycle-state
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_state_lifecycle_state_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_transfer_capacity_total_potential_capacity_total_size_get
* 
* Get database object callback
* Path: /network-topology/link/transfer-capacity/total-potential-capacity/total-size
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_transfer_capacity_total_potential_capacity_total_size_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_transfer_capacity_total_potential_capacity_packet_bw_profile_type_get
* 
* Get database object callback
* Path: /network-topology/link/transfer-capacity/total-potential-capacity/packet-bw-profile-type
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_transfer_capacity_total_potential_capacity_packet_bw_profile_type_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_transfer_capacity_total_potential_capacity_committed_information_rate_get
* 
* Get database object callback
* Path: /network-topology/link/transfer-capacity/total-potential-capacity/committed-information-rate
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_transfer_capacity_total_potential_capacity_committed_information_rate_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_transfer_capacity_total_potential_capacity_committed_burst_size_get
* 
* Get database object callback
* Path: /network-topology/link/transfer-capacity/total-potential-capacity/committed-burst-size
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_transfer_capacity_total_potential_capacity_committed_burst_size_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_transfer_capacity_total_potential_capacity_peak_information_rate_get
* 
* Get database object callback
* Path: /network-topology/link/transfer-capacity/total-potential-capacity/peak-information-rate
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_transfer_capacity_total_potential_capacity_peak_information_rate_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_transfer_capacity_total_potential_capacity_peak_burst_size_get
* 
* Get database object callback
* Path: /network-topology/link/transfer-capacity/total-potential-capacity/peak-burst-size
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_transfer_capacity_total_potential_capacity_peak_burst_size_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_transfer_capacity_total_potential_capacity_color_aware_get
* 
* Get database object callback
* Path: /network-topology/link/transfer-capacity/total-potential-capacity/color-aware
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_transfer_capacity_total_potential_capacity_color_aware_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_transfer_capacity_total_potential_capacity_coupling_flag_get
* 
* Get database object callback
* Path: /network-topology/link/transfer-capacity/total-potential-capacity/coupling-flag
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_transfer_capacity_total_potential_capacity_coupling_flag_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_transfer_capacity_available_capacity_total_size_get
* 
* Get database object callback
* Path: /network-topology/link/transfer-capacity/available-capacity/total-size
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_transfer_capacity_available_capacity_total_size_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_transfer_capacity_available_capacity_packet_bw_profile_type_get
* 
* Get database object callback
* Path: /network-topology/link/transfer-capacity/available-capacity/packet-bw-profile-type
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_transfer_capacity_available_capacity_packet_bw_profile_type_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_transfer_capacity_available_capacity_committed_information_rate_get
* 
* Get database object callback
* Path: /network-topology/link/transfer-capacity/available-capacity/committed-information-rate
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_transfer_capacity_available_capacity_committed_information_rate_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_transfer_capacity_available_capacity_committed_burst_size_get
* 
* Get database object callback
* Path: /network-topology/link/transfer-capacity/available-capacity/committed-burst-size
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_transfer_capacity_available_capacity_committed_burst_size_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_transfer_capacity_available_capacity_peak_information_rate_get
* 
* Get database object callback
* Path: /network-topology/link/transfer-capacity/available-capacity/peak-information-rate
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_transfer_capacity_available_capacity_peak_information_rate_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_transfer_capacity_available_capacity_peak_burst_size_get
* 
* Get database object callback
* Path: /network-topology/link/transfer-capacity/available-capacity/peak-burst-size
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_transfer_capacity_available_capacity_peak_burst_size_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_transfer_capacity_available_capacity_color_aware_get
* 
* Get database object callback
* Path: /network-topology/link/transfer-capacity/available-capacity/color-aware
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_transfer_capacity_available_capacity_color_aware_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_transfer_capacity_available_capacity_coupling_flag_get
* 
* Get database object callback
* Path: /network-topology/link/transfer-capacity/available-capacity/coupling-flag
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_transfer_capacity_available_capacity_coupling_flag_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_transfer_capacity_capacity_assigned_to_user_view_total_size_get
* 
* Get database object callback
* Path: /network-topology/link/transfer-capacity/capacity-assigned-to-user-view/total-size
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_transfer_capacity_capacity_assigned_to_user_view_total_size_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid,
    xmlChar *k_network_topology_link_transfer_capacity_capacity_assigned_to_user_view_total_size);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_transfer_capacity_capacity_assigned_to_user_view_packet_bw_profile_type_get
* 
* Get database object callback
* Path: /network-topology/link/transfer-capacity/capacity-assigned-to-user-view/packet-bw-profile-type
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_transfer_capacity_capacity_assigned_to_user_view_packet_bw_profile_type_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid,
    xmlChar *k_network_topology_link_transfer_capacity_capacity_assigned_to_user_view_total_size);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_transfer_capacity_capacity_assigned_to_user_view_committed_information_rate_get
* 
* Get database object callback
* Path: /network-topology/link/transfer-capacity/capacity-assigned-to-user-view/committed-information-rate
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_transfer_capacity_capacity_assigned_to_user_view_committed_information_rate_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid,
    xmlChar *k_network_topology_link_transfer_capacity_capacity_assigned_to_user_view_total_size);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_transfer_capacity_capacity_assigned_to_user_view_committed_burst_size_get
* 
* Get database object callback
* Path: /network-topology/link/transfer-capacity/capacity-assigned-to-user-view/committed-burst-size
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_transfer_capacity_capacity_assigned_to_user_view_committed_burst_size_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid,
    xmlChar *k_network_topology_link_transfer_capacity_capacity_assigned_to_user_view_total_size);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_transfer_capacity_capacity_assigned_to_user_view_peak_information_rate_get
* 
* Get database object callback
* Path: /network-topology/link/transfer-capacity/capacity-assigned-to-user-view/peak-information-rate
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_transfer_capacity_capacity_assigned_to_user_view_peak_information_rate_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid,
    xmlChar *k_network_topology_link_transfer_capacity_capacity_assigned_to_user_view_total_size);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_transfer_capacity_capacity_assigned_to_user_view_peak_burst_size_get
* 
* Get database object callback
* Path: /network-topology/link/transfer-capacity/capacity-assigned-to-user-view/peak-burst-size
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_transfer_capacity_capacity_assigned_to_user_view_peak_burst_size_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid,
    xmlChar *k_network_topology_link_transfer_capacity_capacity_assigned_to_user_view_total_size);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_transfer_capacity_capacity_assigned_to_user_view_color_aware_get
* 
* Get database object callback
* Path: /network-topology/link/transfer-capacity/capacity-assigned-to-user-view/color-aware
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_transfer_capacity_capacity_assigned_to_user_view_color_aware_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid,
    xmlChar *k_network_topology_link_transfer_capacity_capacity_assigned_to_user_view_total_size);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_transfer_capacity_capacity_assigned_to_user_view_coupling_flag_get
* 
* Get database object callback
* Path: /network-topology/link/transfer-capacity/capacity-assigned-to-user-view/coupling-flag
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_transfer_capacity_capacity_assigned_to_user_view_coupling_flag_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid,
    xmlChar *k_network_topology_link_transfer_capacity_capacity_assigned_to_user_view_total_size);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_transfer_capacity_capacity_interaction_algorithm_get
* 
* Get database object callback
* Path: /network-topology/link/transfer-capacity/capacity-interaction-algorithm
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_transfer_capacity_capacity_interaction_algorithm_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_transfer_cost_cost_characteristic_cost_name_get
* 
* Get database object callback
* Path: /network-topology/link/transfer-cost/cost-characteristic/cost-name
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_transfer_cost_cost_characteristic_cost_name_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid,
    const xmlChar *k_network_topology_link_transfer_cost_cost_characteristic_cost_name,
    const xmlChar *k_network_topology_link_transfer_cost_cost_characteristic_cost_value,
    const xmlChar *k_network_topology_link_transfer_cost_cost_characteristic_cost_algorithm);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_transfer_cost_cost_characteristic_cost_value_get
* 
* Get database object callback
* Path: /network-topology/link/transfer-cost/cost-characteristic/cost-value
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_transfer_cost_cost_characteristic_cost_value_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid,
    const xmlChar *k_network_topology_link_transfer_cost_cost_characteristic_cost_name,
    const xmlChar *k_network_topology_link_transfer_cost_cost_characteristic_cost_value,
    const xmlChar *k_network_topology_link_transfer_cost_cost_characteristic_cost_algorithm);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_transfer_cost_cost_characteristic_cost_algorithm_get
* 
* Get database object callback
* Path: /network-topology/link/transfer-cost/cost-characteristic/cost-algorithm
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_transfer_cost_cost_characteristic_cost_algorithm_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid,
    const xmlChar *k_network_topology_link_transfer_cost_cost_characteristic_cost_name,
    const xmlChar *k_network_topology_link_transfer_cost_cost_characteristic_cost_value,
    const xmlChar *k_network_topology_link_transfer_cost_cost_characteristic_cost_algorithm);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_transfer_integrity_error_characteristic_get
* 
* Get database object callback
* Path: /network-topology/link/transfer-integrity/error-characteristic
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_transfer_integrity_error_characteristic_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_transfer_integrity_loss_characteristic_get
* 
* Get database object callback
* Path: /network-topology/link/transfer-integrity/loss-characteristic
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_transfer_integrity_loss_characteristic_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_transfer_integrity_repeat_delivery_characteristic_get
* 
* Get database object callback
* Path: /network-topology/link/transfer-integrity/repeat-delivery-characteristic
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_transfer_integrity_repeat_delivery_characteristic_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_transfer_integrity_delivery_order_characteristic_get
* 
* Get database object callback
* Path: /network-topology/link/transfer-integrity/delivery-order-characteristic
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_transfer_integrity_delivery_order_characteristic_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_transfer_integrity_unavailable_time_characteristic_get
* 
* Get database object callback
* Path: /network-topology/link/transfer-integrity/unavailable-time-characteristic
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_transfer_integrity_unavailable_time_characteristic_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_transfer_integrity_server_integrity_process_characteristic_get
* 
* Get database object callback
* Path: /network-topology/link/transfer-integrity/server-integrity-process-characteristic
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_transfer_integrity_server_integrity_process_characteristic_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_transfer_timing_latency_characteristic_fixed_latency_characteristic_get
* 
* Get database object callback
* Path: /network-topology/link/transfer-timing/latency-characteristic/fixed-latency-characteristic
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_transfer_timing_latency_characteristic_fixed_latency_characteristic_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid,
    const xmlChar *k_network_topology_link_transfer_timing_latency_characteristic_traffic_property_name,
    const xmlChar *k_network_topology_link_transfer_timing_latency_characteristic_traffic_property_queing_latency);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_transfer_timing_latency_characteristic_jitter_characteristic_get
* 
* Get database object callback
* Path: /network-topology/link/transfer-timing/latency-characteristic/jitter-characteristic
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_transfer_timing_latency_characteristic_jitter_characteristic_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid,
    const xmlChar *k_network_topology_link_transfer_timing_latency_characteristic_traffic_property_name,
    const xmlChar *k_network_topology_link_transfer_timing_latency_characteristic_traffic_property_queing_latency);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_transfer_timing_latency_characteristic_wander_characteristic_get
* 
* Get database object callback
* Path: /network-topology/link/transfer-timing/latency-characteristic/wander-characteristic
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_transfer_timing_latency_characteristic_wander_characteristic_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid,
    const xmlChar *k_network_topology_link_transfer_timing_latency_characteristic_traffic_property_name,
    const xmlChar *k_network_topology_link_transfer_timing_latency_characteristic_traffic_property_queing_latency);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_transfer_timing_latency_characteristic_traffic_property_name_get
* 
* Get database object callback
* Path: /network-topology/link/transfer-timing/latency-characteristic/traffic-property-name
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_transfer_timing_latency_characteristic_traffic_property_name_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid,
    const xmlChar *k_network_topology_link_transfer_timing_latency_characteristic_traffic_property_name,
    const xmlChar *k_network_topology_link_transfer_timing_latency_characteristic_traffic_property_queing_latency);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_transfer_timing_latency_characteristic_traffic_property_queing_latency_get
* 
* Get database object callback
* Path: /network-topology/link/transfer-timing/latency-characteristic/traffic-property-queing-latency
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_transfer_timing_latency_characteristic_traffic_property_queing_latency_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid,
    const xmlChar *k_network_topology_link_transfer_timing_latency_characteristic_traffic_property_name,
    const xmlChar *k_network_topology_link_transfer_timing_latency_characteristic_traffic_property_queing_latency);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_risk_parameter_risk_characteristic_risk_characteristic_name_get
* 
* Get database object callback
* Path: /network-topology/link/risk-parameter/risk-characteristic/risk-characteristic-name
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_risk_parameter_risk_characteristic_risk_characteristic_name_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid,
    const xmlChar *k_network_topology_link_risk_parameter_risk_characteristic_risk_characteristic_name);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_risk_parameter_risk_characteristic_risk_identifier_list_get
* 
* Get database object callback
* Path: /network-topology/link/risk-parameter/risk-characteristic/risk-identifier-list
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_risk_parameter_risk_characteristic_risk_identifier_list_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid,
    const xmlChar *k_network_topology_link_risk_parameter_risk_characteristic_risk_characteristic_name);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_validation_validation_mechanism_validation_mechanism_get
* 
* Get database object callback
* Path: /network-topology/link/validation/validation-mechanism/validation-mechanism
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_validation_validation_mechanism_validation_mechanism_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid,
    const xmlChar *k_network_topology_link_validation_validation_mechanism_validation_mechanism,
    const xmlChar *k_network_topology_link_validation_validation_mechanism_layer_protocol_adjacency_validated,
    const xmlChar *k_network_topology_link_validation_validation_mechanism_validation_robustness);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_validation_validation_mechanism_layer_protocol_adjacency_validated_get
* 
* Get database object callback
* Path: /network-topology/link/validation/validation-mechanism/layer-protocol-adjacency-validated
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_validation_validation_mechanism_layer_protocol_adjacency_validated_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid,
    const xmlChar *k_network_topology_link_validation_validation_mechanism_validation_mechanism,
    const xmlChar *k_network_topology_link_validation_validation_mechanism_layer_protocol_adjacency_validated,
    const xmlChar *k_network_topology_link_validation_validation_mechanism_validation_robustness);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_validation_validation_mechanism_validation_robustness_get
* 
* Get database object callback
* Path: /network-topology/link/validation/validation-mechanism/validation-robustness
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_validation_validation_mechanism_validation_robustness_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid,
    const xmlChar *k_network_topology_link_validation_validation_mechanism_validation_mechanism,
    const xmlChar *k_network_topology_link_validation_validation_mechanism_layer_protocol_adjacency_validated,
    const xmlChar *k_network_topology_link_validation_validation_mechanism_validation_robustness);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_lp_transition_transitioned_layer_protocol_name_get
* 
* Get database object callback
* Path: /network-topology/link/lp-transition/transitioned-layer-protocol-name
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_lp_transition_transitioned_layer_protocol_name_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_lp_transition_node_edge_point_get
* 
* Get database object callback
* Path: /network-topology/link/lp-transition/node-edge-point
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_lp_transition_node_edge_point_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_layer_protocol_name_get
* 
* Get database object callback
* Path: /network-topology/link/layer-protocol-name
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_layer_protocol_name_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_direction_get
* 
* Get database object callback
* Path: /network-topology/link/direction
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_direction_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_uuid_get
* 
* Get database object callback
* Path: /network-topology/link/uuid
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_uuid_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_name_value_name_get
* 
* Get database object callback
* Path: /network-topology/link/name/value-name
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_name_value_name_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid,
    const xmlChar *k_network_topology_link_name_value_name);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_name_value_get
* 
* Get database object callback
* Path: /network-topology/link/name/value
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_name_value_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid,
    const xmlChar *k_network_topology_link_name_value_name);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_label_value_name_get
* 
* Get database object callback
* Path: /network-topology/link/label/value-name
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_label_value_name_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid,
    const xmlChar *k_network_topology_link_label_value_name);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_link_label_value_get
* 
* Get database object callback
* Path: /network-topology/link/label/value
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_link_label_value_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_link_uuid,
    const xmlChar *k_network_topology_link_label_value_name);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_layer_protocol_name_get
* 
* Get database object callback
* Path: /network-topology/layer-protocol-name
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_layer_protocol_name_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_uuid_get
* 
* Get database object callback
* Path: /network-topology/uuid
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_uuid_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_name_value_name_get
* 
* Get database object callback
* Path: /network-topology/name/value-name
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_name_value_name_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_name_value_name);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_name_value_get
* 
* Get database object callback
* Path: /network-topology/name/value
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_name_value_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_name_value_name);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_label_value_name_get
* 
* Get database object callback
* Path: /network-topology/label/value-name
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_label_value_name_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_label_value_name);

/********************************************************************
* FUNCTION u_tapi_topology_network_topology_label_value_get
* 
* Get database object callback
* Path: /network-topology/label/value
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_network_topology_label_value_get (
    val_value_t *dstval,
    const xmlChar *k_network_topology_uuid,
    const xmlChar *k_network_topology_label_value_name);


/********************************************************************
* FUNCTION u_tapi_topology_get_topology_details_validate
* 
* RPC validation phase
* All YANG constraints have passed at this point.
* Add description-stmt checks in this function.
* 
* INPUTS:
*     see agt/agt_rpc.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_get_topology_details_validate (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    xml_node_t *methnode);


/********************************************************************
* FUNCTION u_tapi_topology_get_topology_details_invoke
* 
* RPC invocation phase
* All constraints have passed at this point.
* Call device instrumentation code in this function.
* 
* INPUTS:
*     see agt/agt_rpc.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_get_topology_details_invoke (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    xml_node_t *methnode);


/********************************************************************
* FUNCTION u_tapi_topology_get_node_details_validate
* 
* RPC validation phase
* All YANG constraints have passed at this point.
* Add description-stmt checks in this function.
* 
* INPUTS:
*     see agt/agt_rpc.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_get_node_details_validate (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    xml_node_t *methnode);


/********************************************************************
* FUNCTION u_tapi_topology_get_node_details_invoke
* 
* RPC invocation phase
* All constraints have passed at this point.
* Call device instrumentation code in this function.
* 
* INPUTS:
*     see agt/agt_rpc.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_get_node_details_invoke (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    xml_node_t *methnode);


/********************************************************************
* FUNCTION u_tapi_topology_get_node_edge_point_details_validate
* 
* RPC validation phase
* All YANG constraints have passed at this point.
* Add description-stmt checks in this function.
* 
* INPUTS:
*     see agt/agt_rpc.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_get_node_edge_point_details_validate (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    xml_node_t *methnode);


/********************************************************************
* FUNCTION u_tapi_topology_get_node_edge_point_details_invoke
* 
* RPC invocation phase
* All constraints have passed at this point.
* Call device instrumentation code in this function.
* 
* INPUTS:
*     see agt/agt_rpc.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_get_node_edge_point_details_invoke (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    xml_node_t *methnode);


/********************************************************************
* FUNCTION u_tapi_topology_get_link_details_validate
* 
* RPC validation phase
* All YANG constraints have passed at this point.
* Add description-stmt checks in this function.
* 
* INPUTS:
*     see agt/agt_rpc.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_get_link_details_validate (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    xml_node_t *methnode);


/********************************************************************
* FUNCTION u_tapi_topology_get_link_details_invoke
* 
* RPC invocation phase
* All constraints have passed at this point.
* Call device instrumentation code in this function.
* 
* INPUTS:
*     see agt/agt_rpc.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_get_link_details_invoke (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    xml_node_t *methnode);


/********************************************************************
* FUNCTION u_tapi_topology_get_topology_list_validate
* 
* RPC validation phase
* All YANG constraints have passed at this point.
* Add description-stmt checks in this function.
* 
* INPUTS:
*     see agt/agt_rpc.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_get_topology_list_validate (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    xml_node_t *methnode);


/********************************************************************
* FUNCTION u_tapi_topology_get_topology_list_invoke
* 
* RPC invocation phase
* All constraints have passed at this point.
* Call device instrumentation code in this function.
* 
* INPUTS:
*     see agt/agt_rpc.h for details
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_get_topology_list_invoke (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    xml_node_t *methnode);

/********************************************************************
* FUNCTION u_tapi_topology_init
* 
* initialize the tapi-topology server instrumentation library
* 
* INPUTS:
*    modname == requested module name
*    revision == requested version (NULL for any)
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_init (
    const xmlChar *modname,
    const xmlChar *revision);

/********************************************************************
* FUNCTION u_tapi_topology_init2
* 
* SIL init phase 2: non-config data structures
* Called after running config is loaded
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_tapi_topology_init2 (void);

/********************************************************************
* FUNCTION u_tapi_topology_cleanup
*    cleanup the server instrumentation library
* 
********************************************************************/
extern void u_tapi_topology_cleanup (void);

#ifdef __cplusplus
} /* end extern 'C' */
#endif

#endif